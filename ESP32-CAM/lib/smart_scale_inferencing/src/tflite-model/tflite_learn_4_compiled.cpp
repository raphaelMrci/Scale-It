/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 25.11.2024 21:02:51

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242688;
#else
constexpr int kTensorArenaSize = 241664;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data2[7] = { 18936, -40419, -28487, -36902, -33274, -32822, -24314, };
const TfArray<1, int> tensor_dimension2 = { 1, { 7 } };
const TfArray<7, float> quant2_scale = { 7, { 0.00023252279788721353, 0.00014788589032832533, 0.00030829425668343902, 0.00016198070079553872, 0.00018222587823402137, 0.00018371420446783304, 0.00022497605823446065, } };
const TfArray<7, int> quant2_zero = { 7, { 0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[7*1*1*32] = { 
  /* [0][0][][] */ -11,-53,-27,-14,-10,-57,83,57,5,-18,36,-32,-54,-21,-36,-1,55,37,40,-38,-25,-54,30,-46,63,1,-41,-126,-15,-35,127,45, 
  /* [1][0][][] */ 60,-114,20,-11,49,-40,49,-111,127,11,-91,-70,-94,98,114,96,-43,54,66,-101,88,75,-44,18,-65,50,109,52,84,-34,-78,-19, 
  /* [2][0][][] */ -16,-55,87,69,40,-42,57,43,-38,49,-52,-19,-37,10,-83,-36,-1,7,51,-79,-38,69,-58,7,9,-127,49,-59,-31,35,-9,33, 
  /* [3][0][][] */ 90,32,-29,12,11,-82,44,-70,-107,60,33,-42,1,-9,-121,47,-79,90,-50,107,49,15,84,0,-20,-127,-67,-61,0,-110,6,36, 
  /* [4][0][][] */ -31,57,-27,114,116,-85,-48,-52,-8,114,83,9,-48,-11,-73,-52,-38,42,106,-8,-102,49,-83,19,-29,-10,-78,38,-90,114,-70,-127, 
  /* [5][0][][] */ 65,-59,-11,68,-51,105,99,59,-92,-58,104,-11,-63,14,-11,-79,-89,-8,12,-38,77,89,-127,35,38,-35,111,94,67,-40,-91,-12, 
  /* [6][0][][] */ 82,0,-21,33,-56,-58,-39,-3,53,-73,18,-77,-13,-4,-4,66,12,-14,47,-50,-89,87,-21,63,5,-32,-76,-57,-127,0,-82,35, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 7,1,1,32 } };
const TfArray<7, float> quant3_scale = { 7, { 0.0046416907571256161, 0.0029521430842578411, 0.0061542638577520847, 0.0032335079740732908, 0.0036376484204083681, 0.0036673587746918201, 0.0044910404831171036, } };
const TfArray<7, int> quant3_zero = { 7, { 0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 426, -199, -460, 257, 267, -360, 433, 269, -202, 97, 102, -472, -427, -65, 779, 400, -155, 404, -298, 658, -73, 195, 15, 84, -221, -112, -112, 24, 389, -87, 1380, 1033, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.0893038860522211e-05, 5.5117088777478784e-05, 4.9927824875339866e-05, 4.8116249672602862e-05, 6.7361739638727158e-05, 4.7748220822541043e-05, 4.51372325187549e-05, 6.5061169152613729e-05, 4.7477493353653699e-05, 6.1905266193207353e-05, 4.3965341319562867e-05, 5.3131443564780056e-05, 4.3673760956153274e-05, 4.55451627203729e-05, 4.9778878747019917e-05, 4.7647368774050847e-05, 4.9398277042200789e-05, 6.2653787608724087e-05, 4.3381638533901423e-05, 4.9079819291364402e-05, 4.7999277740018442e-05, 5.0219285185448825e-05, 6.8403896875679493e-05, 5.2805458835791796e-05, 4.1325387428514659e-05, 5.8296081988373771e-05, 5.3053710871608928e-05, 8.3854749391321093e-05, 6.0461945395218208e-05, 5.0431939598638564e-05, 6.9508911110460758e-05, 5.8391284255776554e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -44,-39,96,5,92,-34,-60,-112,79,-97,-87,24,64,28,-26,57,-38,-10,-42,-15,-43,-79,11,102,-127,15,84,-29,112,10,-6,-39,67,-33,-67,74,-81,-60,-62,32,77,-63,-80,86,32,-88,92,-11,20,-24,-61,112,-47,-11,-102,100,37,65,108,-79,-65,76,-35,56,-33,34,67,76,45,83,86,-99,96,-80,17,82,-64,20,-36,50,69,19,87,4,-34,-32,-62,116,43,116,-6,-61,31,49,51,-3, 
  /* [1][0][][] */ 16,44,-66,5,-54,39,28,27,86,-85,-94,95,26,-17,17,61,80,-26,21,87,-37,-4,20,12,29,-16,-21,80,4,4,105,-39,71,89,50,21,19,59,-11,-42,-42,-8,-31,-98,-6,31,4,-39,-10,-41,127,33,-10,78,-63,-2,35,80,54,44,-59,105,-73,-24,-98,8,65,54,73,13,25,-3,-99,87,-54,29,35,-49,-36,55,-74,50,-27,-66,14,117,-52,-87,69,73,55,35,57,23,27,-4, 
  /* [2][0][][] */ -23,-2,-64,81,4,-83,64,90,-114,56,-31,77,69,-33,58,-111,-67,-26,9,78,-90,-25,86,-1,4,61,76,-26,-75,40,51,61,-48,-6,-91,-127,-98,85,58,-17,-107,-60,2,-27,-79,104,-23,-70,89,2,66,-93,-52,89,28,-10,-102,74,-81,-5,-33,34,-44,23,93,33,37,90,-96,25,-11,-39,34,-91,28,9,-46,-38,-6,-15,23,-108,-29,-47,-10,-105,-15,-35,56,84,-32,-20,-68,-82,-57,-82, 
  /* [3][0][][] */ 49,12,31,-18,-81,53,-92,33,70,-17,69,4,99,93,67,20,105,112,-59,74,127,-73,-48,-101,-36,-78,-60,84,63,-48,98,-13,-27,-2,-15,-12,-74,6,7,64,3,-65,-87,-1,75,46,-16,-60,84,-60,-22,26,85,60,94,-61,-121,-70,-91,-41,-111,46,-41,70,77,-10,-46,-17,-27,-81,16,109,43,-92,84,-42,65,94,97,-50,-62,-117,12,115,42,43,-9,-84,-72,61,-2,-114,80,-110,-48,15, 
  /* [4][0][][] */ 42,64,10,58,-5,-36,25,27,29,16,13,11,41,-24,1,-47,-12,3,-59,15,75,-52,63,16,11,21,52,-41,-21,-18,-30,-46,85,91,36,-86,-40,17,-127,57,-24,-21,-52,-60,43,92,46,52,37,-53,11,-36,-58,37,-19,30,18,-71,24,7,23,-48,-23,-13,-23,30,16,9,15,-77,-66,-15,-17,27,95,33,46,-13,1,-70,-3,-12,-80,6,1,59,65,-25,-89,-43,17,14,-1,51,-100,-8, 
  /* [5][0][][] */ 76,-101,64,75,35,-76,20,44,94,-92,-12,-65,2,80,20,34,51,38,-68,91,13,44,5,-30,-95,-75,-24,-79,42,7,6,-122,-8,-25,-57,-28,-113,-56,36,19,-98,-65,29,72,-37,4,9,-51,-100,87,-19,4,28,-27,20,-26,93,31,-85,-41,19,-63,28,-73,-49,77,-27,41,34,-3,93,-78,-41,57,-20,-71,1,-53,8,37,85,45,25,74,-86,69,-13,22,57,-103,127,71,-20,32,65,-83, 
  /* [6][0][][] */ -57,-37,121,98,-48,-38,8,63,-13,-74,27,-113,106,58,118,-112,43,10,-16,95,-67,-100,118,67,-35,-67,-1,-54,-39,-127,48,-91,-75,-84,-61,-73,0,50,-91,101,89,77,41,-3,-112,119,-83,-38,-69,-32,-102,-52,49,-14,101,-43,16,-4,-14,123,-79,-20,94,-63,-42,74,108,-18,77,19,-97,34,63,-99,-74,-25,-65,-81,-42,-17,40,-24,38,-12,-56,-77,-30,-87,83,84,73,25,-43,-21,72,-23, 
  /* [7][0][][] */ 47,47,-23,-33,-71,127,-11,1,69,45,-64,-4,41,-70,34,59,50,15,16,69,38,28,7,65,-46,49,21,37,-55,72,-13,7,4,16,25,73,-50,55,8,-27,66,-47,69,60,25,-11,62,-70,35,-43,-101,-55,-13,68,12,-4,88,-53,24,-29,-14,16,61,-85,-23,-34,48,-1,-85,25,70,62,65,-18,59,48,-48,52,-65,40,61,-43,-9,-56,62,23,-70,62,57,-3,58,25,-46,-13,-6,-48, 
  /* [8][0][][] */ 1,11,-43,-106,62,-17,-72,-28,-10,16,36,96,1,-49,-78,-65,-63,78,-34,44,14,-28,68,97,-91,111,37,72,-51,0,-94,127,69,-42,18,-25,108,2,-41,56,69,87,-112,-106,-2,-26,-20,96,8,-78,-32,6,-34,-40,-23,-109,29,89,-123,93,103,36,20,78,-36,-37,-27,71,-78,24,11,-23,66,99,-20,16,-28,92,70,60,35,81,-119,-85,23,27,67,-27,25,-33,-59,110,-81,-104,-58,54, 
  /* [9][0][][] */ -27,-28,83,54,90,-127,-27,-81,33,20,13,12,-27,-46,-73,-13,-1,7,-82,-18,9,74,-71,-77,85,15,5,4,-4,-38,-52,39,75,15,65,-50,-74,35,-98,-3,40,-26,24,-102,57,30,-45,48,54,-32,-66,6,50,-51,-32,80,46,-29,3,1,-68,64,31,-44,-15,2,86,64,-18,63,76,-22,22,64,-103,-73,-27,-88,-21,50,17,34,42,38,-31,-64,38,-45,56,28,-35,44,76,-13,3,-9, 
  /* [10][0][][] */ -30,108,88,-80,-45,122,108,50,82,16,22,-71,103,88,-41,33,-33,86,-111,-73,-3,31,60,-67,-13,32,-123,-109,-34,125,-82,-79,77,97,116,108,-32,-3,8,35,-30,112,-92,-36,-108,-55,-20,-45,2,41,-37,12,73,13,-77,-19,-86,26,73,-41,-34,101,71,29,119,-65,-96,-23,13,7,-65,-78,96,57,-76,115,-7,68,73,39,86,-1,48,127,-91,49,117,-11,44,23,16,-60,-50,-56,8,-66, 
  /* [11][0][][] */ 94,4,-21,80,94,36,33,24,80,61,-71,79,-8,-77,13,-65,-60,-94,42,25,11,49,7,-100,-87,-87,-27,46,52,-5,9,-14,-81,-61,32,36,-66,53,-22,-53,-34,74,-70,-7,-40,-53,-79,-83,52,75,127,37,-82,-64,7,14,-50,-18,-29,-86,-60,56,65,4,22,59,-56,22,63,52,-78,-65,25,80,-85,30,-58,14,-47,74,-97,-25,-68,-38,25,-70,-3,-31,-90,-19,-1,-47,-81,-32,-59,-20, 
  /* [12][0][][] */ 11,56,-57,1,87,-3,-48,27,-74,81,-21,22,-52,7,30,-79,-110,-44,-54,-98,23,-23,12,84,-92,-34,81,-102,91,36,-42,97,-83,-103,-67,25,-4,-96,-6,26,101,44,-127,-43,-48,-94,-64,107,-43,-90,-82,84,38,-35,-105,63,-57,-33,36,65,49,121,-32,33,112,29,-59,97,127,80,27,82,80,98,-43,-14,-39,27,-124,-79,-61,102,27,3,-40,2,61,119,-108,-119,88,17,102,-4,-19,53, 
  /* [13][0][][] */ 39,-96,107,83,123,113,75,38,45,-121,19,-33,111,66,58,-61,-120,-74,-53,59,58,-32,110,-44,-55,61,5,25,-75,-92,56,47,37,93,-55,6,-73,-29,-17,68,-69,81,-65,12,-50,37,-18,-36,31,83,-59,-78,-67,11,111,-95,-51,-4,7,-71,-12,81,-57,2,-45,-50,-93,77,-58,-22,74,-2,-74,43,-98,-37,-66,61,79,-78,51,-75,73,15,-78,-114,80,127,-21,-50,-66,80,106,-94,54,-36, 
  /* [14][0][][] */ -60,-117,106,78,81,12,5,-89,-67,-49,91,84,6,-59,-54,-89,-35,-50,28,54,-30,47,16,77,-87,-15,-28,51,-87,-113,-97,56,84,-43,-39,-15,106,105,-4,-82,-6,-65,77,101,73,-84,43,-63,101,25,55,59,111,-58,19,34,-50,-28,73,91,3,-71,-15,45,-59,11,81,-85,-114,-54,-78,101,25,97,47,-41,80,-75,65,31,49,11,-99,-40,-91,-91,-98,126,102,13,127,11,81,99,-46,54, 
  /* [15][0][][] */ 24,-30,-8,74,100,-127,74,-103,70,-9,-59,48,94,26,-65,-92,93,21,-56,40,53,31,74,113,76,78,62,110,41,34,73,-63,13,11,-21,-7,-49,105,90,-54,21,107,-51,-17,29,-70,-38,-67,1,-50,31,48,-64,-97,-53,8,75,42,-87,111,-22,-51,7,126,-74,100,-51,6,-50,-11,62,-66,20,11,26,-83,12,59,111,87,-54,66,-77,-62,-96,-16,-78,46,99,78,-87,-13,70,77,-96,97, 
  /* [16][0][][] */ -57,-2,78,-65,15,115,-51,34,30,63,-103,60,-35,-64,-37,-42,99,62,75,39,72,70,-40,47,6,33,-61,50,-106,-26,30,7,-113,54,62,44,-34,44,-48,-64,19,-53,67,82,72,67,96,-12,-63,-127,10,73,-45,80,54,21,26,63,0,13,67,92,31,30,9,4,-33,78,25,79,-41,-31,0,83,50,71,-48,86,-103,-6,11,-102,35,-14,10,101,80,3,57,-8,-8,81,34,-31,-103,29, 
  /* [17][0][][] */ 28,-68,35,81,-10,-127,-32,-62,43,-100,71,28,63,59,-69,33,28,46,51,64,-55,4,20,-28,29,56,-34,30,82,-113,-5,47,9,9,51,14,-38,81,-71,2,-59,-15,-12,-11,14,27,68,-65,76,50,-9,34,-9,73,73,-36,-66,53,-57,-68,38,-73,47,97,-107,-51,46,-43,-62,0,73,47,11,-74,-46,55,86,-26,42,-39,15,-2,-48,-45,-70,64,62,-48,24,61,-84,-78,1,62,-10,16, 
  /* [18][0][][] */ -100,91,99,-78,-7,-127,-106,-2,-13,67,-110,-47,-37,27,55,-61,17,-29,48,-18,94,-51,14,-83,25,-91,-21,103,29,40,-6,46,38,-34,-114,-112,-37,31,-39,58,-43,-5,-55,-15,-116,12,24,-7,11,-20,61,33,-111,-17,4,80,-53,30,-18,-120,76,106,10,26,-71,-116,-37,81,73,-83,-79,103,-102,-39,-94,-109,59,47,-7,-83,-56,-16,-34,-67,97,-41,65,71,-112,-79,-63,109,80,-49,43,-28, 
  /* [19][0][][] */ 100,68,86,65,67,-79,101,127,100,-26,41,-1,-96,56,-24,59,79,-78,81,6,1,90,-30,28,86,-74,52,-36,-71,-88,-19,66,102,-50,85,40,11,-45,12,-69,51,-88,-63,24,-45,48,89,-62,1,65,1,44,-46,28,28,27,49,78,36,-16,72,-24,117,108,-69,-7,1,28,22,72,82,-12,-52,-74,-20,-55,-46,-83,28,97,52,-78,15,93,-65,32,11,-32,103,41,-19,71,0,115,73,-16, 
  /* [20][0][][] */ -9,56,73,117,-44,109,21,46,11,20,-71,-25,25,86,34,-76,-54,-41,-71,-73,19,-37,-68,-57,71,-84,-96,49,8,12,-51,98,87,42,-13,59,38,-42,3,-100,-85,-29,-64,-89,-43,-59,-78,84,47,-120,-117,41,40,106,36,-3,105,56,112,79,127,-63,-43,-23,-14,-60,-45,22,-50,-29,-56,85,-60,-92,21,24,107,71,100,97,69,21,87,-25,46,91,-28,61,23,79,21,79,37,42,3,20, 
  /* [21][0][][] */ 43,59,58,-99,88,-63,70,-7,12,-77,-58,50,35,39,-45,-70,-82,-9,32,55,107,-41,65,-69,28,-57,-15,59,30,26,2,-18,12,38,-86,-106,102,103,-127,-16,12,15,15,-15,-85,-62,-49,84,-9,-43,-54,104,38,95,-78,36,-51,56,-38,110,36,-62,20,-6,83,44,-28,-60,-95,-22,60,69,45,-10,71,58,-67,-23,62,89,28,80,21,-49,33,-82,68,-47,-84,83,91,-81,-33,-82,81,-54, 
  /* [22][0][][] */ 28,-35,-36,-48,59,-38,72,42,-50,60,-44,-87,78,-60,-70,-62,19,45,-88,-22,60,-44,17,22,51,7,-99,68,-42,-39,-40,-78,22,46,33,10,-3,-9,-21,-81,1,-13,6,61,35,-72,60,-14,-58,-41,10,-7,-8,-53,-31,35,-18,-28,127,-32,80,-49,-50,-62,-40,8,-71,-8,61,77,-24,-13,-36,7,34,-56,22,-35,44,68,62,-59,-30,-69,46,46,59,-28,-27,29,-24,54,7,4,6,74, 
  /* [23][0][][] */ 16,-77,1,18,76,-98,9,-122,66,-75,62,84,44,-79,10,-22,78,-16,-70,127,89,-67,85,-26,-52,-2,76,20,76,73,64,-17,-43,34,10,25,90,-3,-110,-4,-76,1,-3,-91,-71,-81,90,21,65,-64,-102,-19,77,-39,-61,84,-72,-5,72,42,-108,-65,-61,-11,33,46,-98,-127,45,-31,103,-74,6,-19,-40,-75,61,-16,83,105,-27,-48,16,-77,86,-3,101,11,-63,49,93,16,94,-69,1,34, 
  /* [24][0][][] */ -85,-54,-114,-76,-92,-120,-77,-99,65,119,81,42,116,60,-46,-127,-90,40,24,-58,96,-89,-63,-44,52,-37,72,55,106,54,0,-69,-5,7,46,27,-61,-93,62,-27,-81,-108,102,0,19,-43,42,70,-94,-53,-27,12,69,59,68,-81,-8,76,22,-4,90,-11,34,94,-106,97,-54,-98,-109,50,-64,-32,-46,38,95,101,62,-84,-114,-89,-87,-103,-70,-124,-2,61,-19,-108,23,-117,1,-85,-23,43,-102,27, 
  /* [25][0][][] */ -18,-36,-69,7,60,-89,-80,53,26,-94,-25,-2,35,10,-90,-13,-62,59,-6,-117,56,58,-9,-55,20,-81,-92,9,38,-72,16,127,95,-47,31,46,61,-21,-37,1,-49,67,-101,-8,105,54,62,26,-65,40,-32,-29,32,26,-26,-21,-21,92,-62,61,96,26,24,8,32,53,-15,23,-12,-38,-18,-82,32,-62,71,12,51,50,9,20,19,44,-36,79,-62,-45,-63,-65,-23,-13,92,73,-75,4,-5,-51, 
  /* [26][0][][] */ -7,-96,-9,-6,-41,27,-13,-6,-102,-98,97,55,-25,-48,8,-25,82,18,-73,-46,8,53,80,12,63,67,3,31,-4,5,-88,1,-29,-44,-118,-70,-51,75,-45,95,-82,95,54,34,-60,75,-30,76,-21,-8,-31,87,0,-26,17,-98,66,36,95,16,20,-103,81,-45,115,-10,-50,52,-84,82,58,93,69,-88,-74,8,52,-89,-81,20,-27,69,60,-49,63,-8,-43,21,-77,85,-2,32,-50,127,42,71, 
  /* [27][0][][] */ 52,24,-42,-46,-127,-36,-35,11,35,45,20,-61,-15,25,42,10,39,-10,39,-74,-56,14,-15,-14,-46,-2,-63,-7,15,11,-14,-11,24,45,-54,-50,-64,-34,-53,54,-49,-4,22,6,57,16,42,57,42,30,29,-45,-26,-37,-2,-22,65,16,-69,-39,-33,-32,-16,11,-1,-32,-50,68,22,8,-21,-16,30,-35,2,-36,19,-30,47,57,40,-19,56,-23,-41,-21,-12,5,-22,0,-13,-28,26,11,46,40, 
  /* [28][0][][] */ 46,-6,83,24,-30,-55,-64,-33,-27,-21,60,54,-46,-76,4,84,62,86,-54,55,-21,25,-64,-52,-52,81,-58,-37,-50,-47,-4,10,-57,17,52,58,24,-71,-1,42,72,43,-49,48,-77,11,14,39,26,-52,-49,-9,-27,16,55,-7,34,-5,127,46,-12,-32,-42,-4,30,60,-5,89,-60,50,-74,-35,72,15,-28,-54,-70,-35,-53,45,-50,-39,64,-15,52,-86,58,-44,-90,-44,-15,-12,-45,102,-55,-9, 
  /* [29][0][][] */ 54,61,24,-72,-108,8,-107,20,78,-38,-71,-93,89,-102,-35,-36,-78,106,-9,-26,-53,-34,49,-10,-21,19,-37,-48,-66,21,101,-27,55,19,-76,-58,-16,123,-72,92,72,102,-38,64,34,105,-5,3,31,8,50,-82,52,-66,127,58,-120,63,-72,86,-118,106,-105,-48,-2,-50,44,79,90,-94,16,-52,110,88,103,5,105,-55,-30,15,-1,-75,-42,-54,61,100,58,55,-56,99,63,31,-116,-42,-11,48, 
  /* [30][0][][] */ 28,-36,-8,33,14,81,-15,12,38,36,29,-6,-127,24,77,11,46,20,52,-69,24,-26,-32,51,-34,70,-29,101,-6,-101,-45,14,-97,-40,-58,-26,52,9,37,18,69,-20,29,110,83,-16,75,58,-61,26,25,-26,61,-38,5,64,-24,-61,-57,13,-57,18,1,4,-35,-41,-30,40,-41,103,36,13,-66,76,47,-29,-64,1,-34,-63,29,21,-60,-13,-41,55,-62,64,0,-92,42,40,-5,20,6,-13, 
  /* [31][0][][] */ 43,-58,50,89,58,33,-13,-99,-14,23,-43,-23,31,-52,-10,107,-9,-37,71,44,67,55,5,111,48,-85,63,56,-35,-63,53,108,13,40,-44,20,107,-10,-17,-73,65,-33,-8,50,2,-43,-27,29,65,37,78,-8,-65,-5,-70,1,-52,67,-47,127,-29,18,119,-26,54,110,-8,-57,61,-91,-52,31,-64,-41,13,32,-30,-1,63,96,-23,-34,83,39,70,105,-54,41,55,-23,-59,-33,43,84,15,-34, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0021629540715366602, 0.0023424762766808271, 0.0021219325717538595, 0.0020449406001716852, 0.0028628739528357983, 0.0020292992703616619, 0.0019183323020115495, 0.0027650995180010796, 0.0020177934784442186, 0.0026309737004339695, 0.0018685269169509411, 0.0022580863442271948, 0.0018561348551884294, 0.0019356694538146257, 0.0021156023722141981, 0.0020250130910426378, 0.0020994266960769892, 0.0026627860497683287, 0.0018437196267768741, 0.0020858922507613897, 0.0020399692002683878, 0.0021343196276575327, 0.0029071655590087175, 0.0022442319896072149, 0.0017563288565725088, 0.0024775834754109383, 0.00225478271022439, 0.0035638266708701849, 0.0025696326047182083, 0.0021433574147522449, 0.0029541286639869213, 0.0024816296063363552, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { -3404, 3709, 10278, 1486, -3885, -2945, 19082, 3609, 2387, -1421, 12411, -277, -8035, 2485, 14526, 5734, 14425, 6401, -5071, -5860, 4307, 23089, 19092, 15204, 1716, 1094, 5223, 3455, 2107, -4724, 8339, -3086, -287, 3566, 22, 1134, 11324, 4852, -1693, 5369, 7434, 5467, 5124, 12440, 4278, 3858, 2331, 9900, 5541, -6069, -8360, 370, -428, -1035, 2687, -6, 307, -1004, -3332, 9580, -1114, 1701, -1223, -1800, -3530, 6799, 13879, 1751, -2402, 943, 1481, 1560, 2123, -999, 681, 12830, -813, 20496, 11994, -1079, 8723, 1955, -618, 920, 17315, 8864, 4111, 1639, 5908, 4503, -268, -13626, 1160, -2230, -1413, -2296, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00019400026940274984, 0.00042611776734702289, 0.00023468166182283312, 0.00061948777874931693, 0.00025750519125722349, 0.000464482611278072, 0.0001728247880237177, 0.00020902894902974367, 0.00026110335602425039, 0.0004535884945653379, 0.00016004253120627254, 0.00025019541499204934, 0.00031168886926025152, 0.0011329465778544545, 0.00021164424833841622, 0.00019785968470387161, 0.00012972470722161233, 0.00021970846864860505, 0.00038111547473818064, 0.00028313754592090845, 0.00014655980339739472, 0.00011664069461403415, 0.00016069483535829931, 0.00011067673040088266, 0.00013272187788970768, 0.0004101013473700732, 0.00056862353812903166, 0.00031127783586271107, 0.00024505992769263685, 0.00040842825546860695, 0.00017801611102186143, 0.00024771018070168793, 0.00016889088146854192, 0.00031231605680659413, 0.00032217949046753347, 0.00026805957895703614, 0.00016994189354591072, 0.00022453947167377919, 0.0003303384582977742, 0.00032945885322988033, 0.00017504468269180506, 0.00047091496526263654, 0.00029860209906473756, 0.00018828747852239758, 0.00045030130422674119, 0.00025575089966878295, 0.00021045281027909368, 0.00021576430299319327, 0.00024723022943362594, 0.00022505431843455881, 0.00018468727648723871, 0.00020421129011083394, 0.00030496489489451051, 0.00030662133940495551, 0.00029147716122679412, 0.00038071017479524016, 0.00039214588468894362, 0.00029753614217042923, 0.00045101356226950884, 0.00019414504640735686, 0.00069113302743062377, 0.00036221460322849452, 0.00022771976364310831, 0.00040964630898088217, 0.00050965504487976432, 0.00028238858794793487, 0.0001560468808747828, 0.00021766508871223778, 0.00048571437946520746, 0.00038939222577027977, 0.00026239172439090908, 0.0003361357084941119, 0.00063103792490437627, 0.00040264733252115548, 0.00031744182342663407, 0.00016783019236754626, 0.00021388387540355325, 9.0205896412953734e-05, 0.00015210025594569743, 0.00020488078007474542, 0.0001665695890551433, 0.00018358569650445133, 0.00014838944480288774, 0.0001963125541806221, 0.00010270321217831224, 0.00026767581584863365, 0.0005630386876873672, 0.00019714618974830955, 0.00011893243936356157, 0.00046148302499204874, 0.00024395884247496724, 0.00014286294754128903, 0.00023883039830252528, 0.00045797126949764788, 0.00045972486259415746, 0.0001925225806189701, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -33,117,2,-127,-39,-32,-45,-82,-31,25,3,85,-14,-88,7,45, 
  /* [1][0][][] */ -32,34,-88,-33,-55,-46,9,-100,19,86,-88,46,77,-2,63,-127, 
  /* [2][0][][] */ 14,-21,-77,30,67,19,-50,-45,127,-77,-24,-60,-25,113,-78,91, 
  /* [3][0][][] */ 1,-25,-7,-32,-23,-34,-28,20,79,-7,23,21,-7,24,-16,127, 
  /* [4][0][][] */ -116,71,55,91,11,-23,-9,81,-43,-20,25,-77,-127,-3,-9,78, 
  /* [5][0][][] */ -16,53,127,6,-1,81,-66,80,-59,71,-51,-21,36,-56,-112,-13, 
  /* [6][0][][] */ 101,-60,87,-114,48,-56,-83,86,-67,-36,30,-22,47,127,-87,112, 
  /* [7][0][][] */ 7,107,-89,-97,123,55,-5,-50,127,96,-3,54,-18,-39,120,21, 
  /* [8][0][][] */ 30,-74,26,-88,22,-49,17,-73,-20,56,54,-12,46,127,90,92, 
  /* [9][0][][] */ 4,-21,14,127,18,7,44,-46,-48,103,38,-2,-5,-43,20,-11, 
  /* [10][0][][] */ 26,39,-127,-78,45,11,8,39,115,-70,-15,-41,-65,-43,-23,32, 
  /* [11][0][][] */ -13,17,43,-46,92,-28,79,-87,-104,21,10,13,-12,127,-75,-12, 
  /* [12][0][][] */ 17,-13,-88,10,12,-42,8,17,19,117,-16,-16,-77,127,-27,17, 
  /* [13][0][][] */ -8,4,-30,3,3,-127,-10,25,14,-19,9,5,11,-15,5,27, 
  /* [14][0][][] */ 29,-18,85,-42,43,34,-127,-85,1,-13,28,29,-37,-101,-24,-57, 
  /* [15][0][][] */ -32,10,-30,-75,-40,-3,127,31,-95,126,80,27,75,116,41,1, 
  /* [16][0][][] */ 9,83,127,73,-66,27,50,36,-99,43,-70,70,24,0,-25,-23, 
  /* [17][0][][] */ -39,-79,-16,17,-40,7,-35,11,-127,-23,16,-46,-13,24,96,-59, 
  /* [18][0][][] */ 2,40,27,58,-1,-22,1,-15,43,55,-22,-3,56,127,45,24, 
  /* [19][0][][] */ -6,-18,47,61,99,91,-103,-18,-48,-127,-50,-93,-65,-45,38,-62, 
  /* [20][0][][] */ 33,-30,-10,-17,19,-53,35,33,-96,15,-127,-78,22,-5,17,-1, 
  /* [21][0][][] */ 46,4,73,-31,-37,3,-43,55,31,-66,114,127,-18,85,-5,60, 
  /* [22][0][][] */ -27,36,-60,127,-22,15,91,56,-15,10,-51,-17,-24,7,34,-11, 
  /* [23][0][][] */ 10,-3,125,-43,13,-12,-23,-3,37,14,36,-17,-4,-3,-127,2, 
  /* [24][0][][] */ -127,49,15,-45,-5,74,-15,-25,-45,-7,98,17,-92,22,44,26, 
  /* [25][0][][] */ 18,42,22,34,16,21,83,-73,14,-127,2,-20,-13,-37,9,14, 
  /* [26][0][][] */ -63,22,8,4,-48,-13,-44,-43,-127,-44,-3,-56,11,116,-37,74, 
  /* [27][0][][] */ -2,35,27,65,28,-29,-16,-48,52,13,-24,-6,11,127,-23,15, 
  /* [28][0][][] */ 15,47,71,58,92,-36,58,7,-127,-30,-54,-73,43,95,35,-4, 
  /* [29][0][][] */ -1,-39,-1,30,32,0,28,30,-42,-8,2,-127,4,10,-5,-44, 
  /* [30][0][][] */ -19,82,-28,81,-60,-22,45,-127,-94,69,-49,-12,103,50,106,88, 
  /* [31][0][][] */ -53,-5,1,-45,-26,-7,-80,-110,70,94,35,-127,-76,-48,-21,9, 
  /* [32][0][][] */ -97,-60,-18,67,99,18,-15,27,-21,-63,-127,48,111,0,56,85, 
  /* [33][0][][] */ 7,-15,-31,-31,-62,3,-80,5,16,31,7,-18,57,-83,127,34, 
  /* [34][0][][] */ 57,2,77,5,42,37,-63,87,-106,-16,82,54,26,2,2,127, 
  /* [35][0][][] */ -34,-23,-83,15,17,-46,66,-125,80,122,-36,-12,28,34,75,-127, 
  /* [36][0][][] */ 1,3,43,113,10,-5,123,-26,-39,30,0,-75,-7,1,-105,-127, 
  /* [37][0][][] */ 1,-4,8,-31,-5,13,-40,-35,-91,-25,-20,-29,-11,-127,64,-17, 
  /* [38][0][][] */ 12,62,-3,-34,127,-5,53,-47,121,67,0,-2,5,-37,63,-2, 
  /* [39][0][][] */ -33,84,-35,-127,3,38,-4,10,44,-70,-34,-41,-12,57,68,11, 
  /* [40][0][][] */ 4,-30,68,-38,-13,-1,37,-31,-127,15,18,-39,4,-72,65,-79, 
  /* [41][0][][] */ -5,-16,-51,-19,17,-34,46,-20,-3,9,-40,-35,-127,12,25,7, 
  /* [42][0][][] */ 88,79,-9,-9,-55,9,-33,-29,42,34,98,-26,-120,19,83,-127, 
  /* [43][0][][] */ -6,69,14,28,35,25,102,-20,81,95,-1,-9,-44,-106,-89,-127, 
  /* [44][0][][] */ -12,27,16,-30,57,-4,-127,-107,-51,-23,10,39,28,-46,53,-47, 
  /* [45][0][][] */ -9,67,-127,-31,24,-13,-13,-44,8,2,-26,-15,-21,-41,63,32, 
  /* [46][0][][] */ 17,2,-2,-102,-18,6,1,-44,-127,-5,19,43,2,-126,61,-37, 
  /* [47][0][][] */ 13,53,16,-15,127,-6,-21,12,-40,29,4,1,-16,-10,99,-28, 
  /* [48][0][][] */ -92,-79,-42,38,59,12,6,-6,-16,-29,-127,-2,52,9,73,80, 
  /* [49][0][][] */ 46,33,117,83,127,-8,34,19,-119,-21,-58,-46,6,108,14,-95, 
  /* [50][0][][] */ 67,-51,-122,-40,26,-127,-67,-73,7,-6,0,-36,44,-19,-22,30, 
  /* [51][0][][] */ -6,33,75,25,21,-18,-1,23,-127,73,40,-122,27,-91,-35,67, 
  /* [52][0][][] */ 11,64,-37,57,72,23,57,103,119,117,-53,-87,8,127,91,-19, 
  /* [53][0][][] */ 7,-55,12,-17,-75,-7,-76,6,33,27,-12,-32,18,-92,127,48, 
  /* [54][0][][] */ -6,25,-75,-4,84,127,-125,-42,-66,27,-34,-41,-36,-47,27,-17, 
  /* [55][0][][] */ 40,-13,8,-5,27,-47,-67,-127,-64,-75,-28,19,11,-31,21,11, 
  /* [56][0][][] */ -39,3,11,-21,7,-36,-127,61,-7,125,8,-20,18,12,-25,37, 
  /* [57][0][][] */ -5,24,-2,-18,-80,-52,122,92,-27,19,27,-6,45,41,127,-22, 
  /* [58][0][][] */ 69,-4,-127,31,33,85,42,14,-68,-6,5,-3,-33,28,-30,-22, 
  /* [59][0][][] */ -111,60,105,23,-72,-59,127,102,15,-14,31,-46,-7,-3,56,-4, 
  /* [60][0][][] */ 17,11,-56,10,8,-127,-56,1,40,-19,-3,9,5,-16,-21,20, 
  /* [61][0][][] */ 26,-23,43,127,93,18,46,24,-116,15,37,63,3,35,39,-63, 
  /* [62][0][][] */ -28,127,86,-64,-46,-7,-75,68,11,-69,-47,-63,-33,-86,-76,-10, 
  /* [63][0][][] */ -28,20,-16,127,-54,-4,-63,-16,-29,-36,-14,-44,29,79,9,32, 
  /* [64][0][][] */ 1,-18,22,52,-23,0,-9,63,-9,33,-55,-91,14,-127,55,-9, 
  /* [65][0][][] */ -36,-38,32,-98,18,-34,44,-20,-27,22,-2,-127,3,19,10,-13, 
  /* [66][0][][] */ 24,20,-7,-22,-28,25,-44,46,-26,-53,-7,55,-35,28,34,127, 
  /* [67][0][][] */ -22,77,-26,-127,12,15,-61,28,78,-98,-7,-6,1,46,58,25, 
  /* [68][0][][] */ -17,-10,127,19,15,-32,29,16,-44,-3,5,-26,-3,5,61,-51, 
  /* [69][0][][] */ 109,122,-29,29,-42,-24,0,-31,50,5,102,-41,-66,34,38,-127, 
  /* [70][0][][] */ 43,9,-33,-4,-21,21,56,127,-46,83,-38,-8,29,67,-27,43, 
  /* [71][0][][] */ 7,-6,-6,20,-16,-56,2,18,-17,26,-86,-2,-127,-13,23,26, 
  /* [72][0][][] */ 27,6,-113,28,41,17,66,127,-48,-11,-11,-53,30,1,8,2, 
  /* [73][0][][] */ -36,2,7,0,54,-26,-40,-127,29,-74,39,-19,20,-31,42,-34, 
  /* [74][0][][] */ -22,49,43,108,24,18,-95,100,-91,2,-51,44,9,-127,56,-86, 
  /* [75][0][][] */ 3,7,-54,-17,-4,18,24,7,82,80,-29,-7,49,127,5,-29, 
  /* [76][0][][] */ 16,-13,-10,41,10,-31,-28,70,33,-33,-43,-127,2,-2,-11,34, 
  /* [77][0][][] */ -22,21,66,127,-52,19,106,90,2,89,39,19,13,-9,-7,-97, 
  /* [78][0][][] */ 25,2,31,-89,46,-64,-33,32,-4,-38,-9,-81,82,127,13,24, 
  /* [79][0][][] */ -42,-105,-67,-96,-127,-21,15,-124,98,85,18,39,20,59,47,-74, 
  /* [80][0][][] */ -20,-9,127,-107,52,-58,-7,-86,2,94,-21,-114,-5,124,91,-52, 
  /* [81][0][][] */ -32,36,-91,39,68,-127,-10,36,4,-45,63,-19,25,12,-11,-4, 
  /* [82][0][][] */ 127,-8,9,6,0,-112,-7,17,-41,6,-102,-12,124,8,18,23, 
  /* [83][0][][] */ -1,67,-105,-94,-54,-25,46,-127,65,81,-36,-83,39,45,49,114, 
  /* [84][0][][] */ -64,17,56,-51,-9,23,116,-127,-55,106,-25,-123,3,19,74,-71, 
  /* [85][0][][] */ -84,127,28,-106,-100,-32,-59,-6,-58,22,-74,71,29,5,-85,-30, 
  /* [86][0][][] */ 11,31,-35,-12,9,-14,127,18,-26,-17,-20,-3,27,20,112,-14, 
  /* [87][0][][] */ -32,-56,23,-101,5,-49,43,-9,36,23,9,-127,-32,12,-6,-71, 
  /* [88][0][][] */ 76,-10,78,26,-19,-127,-23,18,-28,63,-47,17,67,65,45,28, 
  /* [89][0][][] */ 34,-44,-67,-43,9,-14,-37,0,-49,-4,12,-95,127,15,36,-20, 
  /* [90][0][][] */ 14,-80,27,-69,61,-10,-41,86,52,-80,-43,-24,-28,107,19,-127, 
  /* [91][0][][] */ -109,27,-69,-87,19,3,-88,-122,-9,75,13,-127,-47,-38,30,23, 
  /* [92][0][][] */ -30,7,50,23,-2,-127,13,-3,-18,-28,3,-29,15,-6,11,29, 
  /* [93][0][][] */ 39,-20,127,1,-40,34,39,-11,-28,9,-59,-4,-19,-7,30,23, 
  /* [94][0][][] */ 49,12,-8,-17,19,-15,-26,12,-11,2,23,-41,127,-21,7,-41, 
  /* [95][0][][] */ 127,105,7,3,-117,-3,-48,-7,-35,-16,120,-68,-47,11,79,-85, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00058816926321014762, 0.001291902270168066, 0.00071150698931887746, 0.0018781607504934072, 0.00078070326708257198, 0.0014082166599109769, 0.00052396953105926514, 0.00063373317243531346, 0.00079161213943734765, 0.0013751878868788481, 0.00048521632561460137, 0.00075854151509702206, 0.00094497716054320335, 0.0034348631743341684, 0.00064166222000494599, 0.00059987022541463375, 0.00039329886203631759, 0.00066611130023375154, 0.001155464444309473, 0.00085841532563790679, 0.00044433947186917067, 0.00035363080678507686, 0.00048719398910179734, 0.00033554929541423917, 0.00040238568908534944, 0.0012433436932042241, 0.0017239507287740707, 0.00094373093452304602, 0.0007429717225022614, 0.0012382712448015809, 0.00053970859153196216, 0.00075100682443007827, 0.00051204272313043475, 0.00094687863020226359, 0.00097678252495825291, 0.00081270199734717607, 0.0005152291851118207, 0.0006807579193264246, 0.0010015189182013273, 0.0009988520760089159, 0.00053069979185238481, 0.0014277182053774595, 0.00090530072338879108, 0.00057084928266704082, 0.0013652218040078878, 0.00077538460027426481, 0.00063805002719163895, 0.00065415340941399336, 0.0007495516911149025, 0.00068231881596148014, 0.00055993418209254742, 0.00061912700766697526, 0.00092459138249978423, 0.00092961342306807637, 0.00088369939476251602, 0.0011542356805875897, 0.0011889063753187656, 0.00090206897584721446, 0.0013673811918124557, 0.00058860820718109608, 0.0020953745115548372, 0.0010981608647853136, 0.00069039990194141865, 0.0012419641716405749, 0.001545170322060585, 0.00085614464478567243, 0.00047310235095210373, 0.00065991620067507029, 0.0014725869987159967, 0.0011805578833445907, 0.00079551828093826771, 0.0010190949542447925, 0.0019131783628836274, 0.0012207446852698922, 0.00096241891151294112, 0.00050882692448794842, 0.00064845231827348471, 0.00027348590083420277, 0.00046113698044791818, 0.00062115676701068878, 0.00050500506768003106, 0.0005565944011323154, 0.00044988657464273274, 0.00059517967747524381, 0.0003113752172794193, 0.00081153854262083769, 0.0017070185858756304, 0.00059770705411210656, 0.00036057890974916518, 0.0013991225278005004, 0.00073963351314887404, 0.00043313135392963886, 0.00072408508276566863, 0.0013884755317121744, 0.0013937921030446887, 0.00058368925238028169, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -7071, 13803, -36051, -7063, -6759, 499, 20535, -53965, 9803, 23459, 11544, 7159, 4963, 15311, -9324, 13640, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0008523704600520432, 0.00048424821579828858, 0.00023728694941382855, 0.0003233074676245451, 0.00039507672772742808, 0.00035888751153834164, 0.00044574865023605525, 0.00028551678406074643, 0.00036697689210996032, 0.0003698547079693526, 0.00091182487085461617, 0.00061582424677908421, 0.00034447241341695189, 0.00027175762807019055, 0.00052313343621790409, 0.00055013695964589715, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -28,-23,17,-2,16,7,-59,19,24,-13,7,-17,3,-1,-35,-23,5,-5,1,-10,22,-22,7,28,9,7,-33,127,35,-24,53,-13,-1,32,7,22,29,13,-64,9,-21,26,1,51,12,-13,11,10,27,-5,1,52,20,-13,-31,68,5,4,-47,-26,0,48,3,-18,-54,-26,-22,40,8,32,25,-28,4,-10,-2,-6,-57,50,-11,-6,-5,-30,24,7,-8,-35,14,-88,-2,-17,29,-12,39,-29,-19,-15, 
  /* [1][0][][] */ 1,-70,-58,-17,116,-6,81,11,-14,-73,-48,1,19,11,-75,31,-34,-18,20,30,-6,21,-52,-63,44,4,39,-48,68,-5,-61,48,7,31,11,0,-15,-3,54,38,31,46,-16,19,-13,127,4,33,26,-40,-1,-55,-52,-12,64,34,-4,-18,-80,-17,28,3,-15,-47,-94,93,-26,-14,-2,-4,-21,-6,14,-96,9,16,-6,-47,6,24,21,4,25,-5,-43,11,16,33,49,14,-35,26,43,26,4,93, 
  /* [2][0][][] */ 5,80,-50,56,103,96,79,127,67,-70,16,37,62,9,50,-4,-15,-13,-65,111,-15,54,65,63,108,42,17,-109,24,25,3,-81,12,55,-4,24,-107,62,100,14,-16,-12,20,23,83,6,18,7,-9,48,56,81,71,-36,-23,66,35,15,17,-10,15,27,-1,-12,18,-10,-10,8,-30,30,-24,-55,-79,-46,-11,58,114,21,5,8,36,-56,9,-40,-22,17,63,53,11,24,-41,-60,-17,-28,-88,7, 
  /* [3][0][][] */ 52,6,75,-10,40,-30,30,5,12,-48,14,22,-2,24,26,127,4,27,1,9,67,43,47,32,65,-12,30,4,33,15,-19,26,-52,-30,24,-26,-19,4,19,17,-52,-30,79,-21,-23,43,3,-61,-52,8,-12,47,26,-111,16,15,-53,81,90,11,2,92,-24,-21,52,45,23,-26,37,-47,21,-66,18,-13,50,-12,30,-62,39,57,-13,-46,15,-10,-32,54,8,43,24,-9,-3,48,7,70,30,-43, 
  /* [4][0][][] */ 28,15,23,-40,107,68,-54,-13,-49,-109,-50,-30,-35,25,-8,101,29,-31,-60,106,-4,-45,45,-58,-56,-9,-15,-2,6,-24,100,-36,127,-4,-39,-15,29,-68,21,32,-33,-43,-37,-88,-43,-68,-18,67,17,-8,-88,3,-8,-54,3,-52,22,5,-39,43,-37,35,74,33,57,35,-12,-15,-31,-29,53,115,22,-49,-65,-23,-28,6,106,-82,-10,-40,60,29,-69,-21,60,71,-59,20,9,-30,10,34,27,10, 
  /* [5][0][][] */ -13,-22,-30,16,61,18,27,-31,-9,-40,-35,3,-4,37,-9,17,9,-15,3,-1,5,26,-41,67,19,-6,46,-56,4,44,41,57,-7,-26,12,-56,12,42,-7,3,22,-9,45,3,19,68,-11,20,-22,-18,-4,-10,-58,-17,-2,-14,1,18,-55,32,59,52,26,37,-14,33,12,95,5,66,26,51,6,52,-31,112,-60,-61,21,12,-5,-30,-13,21,-25,24,9,127,20,31,-17,-26,-16,61,-68,-6, 
  /* [6][0][][] */ 34,-83,10,-53,-20,12,43,38,0,-5,-24,-22,-22,-1,-24,48,-5,8,-26,7,-46,53,36,13,-12,-4,3,-10,11,16,46,-9,50,-11,30,-13,-5,3,-27,-76,-23,80,3,-64,-12,-37,-17,31,-17,34,-4,58,4,-20,8,-12,1,-38,25,15,-13,71,41,-49,50,-36,28,2,3,-39,127,-9,-18,-5,-18,-3,-57,-38,23,15,27,10,9,0,-19,21,28,15,10,-12,27,-22,-29,-11,-31,-20, 
  /* [7][0][][] */ 50,127,59,-6,106,46,13,-21,-51,-110,59,-30,-13,16,35,36,7,-55,12,47,47,-34,71,21,-56,-17,-17,16,18,-37,45,29,59,-15,-60,13,31,-69,-51,119,-69,10,19,-22,-62,-57,19,14,-51,-40,16,37,25,-16,-30,13,66,30,24,26,-23,-30,5,-9,-45,109,-34,-57,-21,-43,1,74,23,-38,-8,5,7,44,80,-56,-54,-27,-8,-16,-51,21,-15,-12,-39,3,7,-27,-48,12,75,9, 
  /* [8][0][][] */ -16,6,66,16,-127,-4,39,-11,16,30,30,-22,3,9,39,-2,-51,14,13,-13,-41,-32,-116,66,-27,-28,9,-23,3,30,-8,9,78,-2,-16,-27,-20,-18,5,40,23,-34,48,27,-23,-16,18,31,-109,18,-2,22,-64,-40,-49,14,-1,-40,-75,-9,18,-39,-48,-11,3,106,-16,-62,22,24,-21,-9,64,50,19,-26,-60,-25,-11,-29,-81,26,-24,-29,21,-2,73,12,-5,-40,62,53,21,19,49,24, 
  /* [9][0][][] */ -1,-69,21,31,52,91,2,-14,10,-4,57,50,5,14,71,-127,7,-53,-40,5,-20,21,15,40,3,19,3,4,13,1,9,-34,10,7,-87,37,49,85,-50,48,43,-39,-4,88,10,-58,-69,-19,4,6,8,-17,14,15,2,-67,-32,54,-11,5,-19,12,-38,117,-89,6,-37,-14,-17,7,-34,-89,39,24,33,6,49,-46,7,8,10,-25,-29,-12,-21,-27,23,-19,-26,-10,-43,-34,-51,-33,-16,-49, 
  /* [10][0][][] */ -25,-2,1,-17,-6,-18,74,-4,54,28,10,64,45,-2,-7,-11,-18,33,-30,-9,-19,31,6,6,11,0,28,-127,23,-4,26,-44,11,36,7,-18,1,55,13,-10,9,-26,26,-30,32,30,28,-7,16,38,12,15,-32,-17,-12,-44,-11,16,-34,-43,46,3,-10,22,-10,90,0,-42,25,5,7,-12,-51,11,19,38,-16,42,-26,27,-17,-2,5,15,-1,-6,29,115,16,16,-11,9,18,-16,17,-31, 
  /* [11][0][][] */ -114,42,-11,16,49,-52,38,-20,-38,27,-25,33,22,24,-36,3,71,1,-79,-44,23,2,-31,1,71,20,127,2,-38,27,-82,-8,-4,37,9,-7,-13,42,81,-17,38,-11,2,29,119,89,74,37,48,21,4,35,-8,-80,20,26,-108,-25,-61,-45,-3,-20,-2,27,10,-45,18,-14,20,45,-20,30,-26,1,34,-2,10,94,-87,99,-44,2,-75,-71,110,45,27,-26,3,79,-30,-124,-44,48,-45,-7, 
  /* [12][0][][] */ -28,-23,-48,9,53,29,0,-31,-53,67,42,-23,-21,-23,44,-39,-61,-34,23,-1,43,28,-43,84,3,4,-40,94,-37,-18,-21,7,-53,52,16,51,1,-6,-48,-3,2,4,-60,-37,-52,-46,24,19,0,-44,19,-24,3,15,-32,-43,-42,-14,36,5,-31,-25,5,53,22,-99,-24,67,-59,-127,-11,30,18,-22,40,59,62,43,22,6,-30,-17,-52,7,-8,1,-56,-52,-34,20,25,-30,-71,-19,3,12, 
  /* [13][0][][] */ -3,33,15,-5,-56,-19,-3,33,-36,-4,41,29,40,37,-38,2,-57,18,7,15,27,2,64,-36,45,19,-38,-28,-35,-24,-28,-127,-89,-30,25,35,24,71,-25,-44,-87,108,-20,-26,48,-44,-10,-20,61,-55,62,67,87,-25,44,-33,-57,44,72,-3,9,20,4,37,19,-10,-8,0,21,13,25,-102,45,-27,-72,-62,85,76,-38,-28,91,-57,15,-16,9,-10,41,21,-42,-25,7,11,42,-43,-8,12, 
  /* [14][0][][] */ -47,47,-70,-84,39,14,-14,0,-94,30,-17,7,-46,-78,-101,9,-57,-25,37,-1,73,-9,18,-108,-3,1,-36,55,-6,-58,6,13,-47,-21,11,40,-43,-41,-7,-8,21,66,-94,-22,-80,16,24,28,127,-60,-4,-26,12,33,-82,44,-39,21,-92,12,-30,23,67,10,-8,-17,-32,-4,-53,-13,28,31,33,-39,-6,40,41,-61,12,-44,-3,-18,35,59,5,-60,-83,11,-41,23,31,44,-11,5,17,-19, 
  /* [15][0][][] */ 7,-80,-3,-37,3,-40,-25,-42,-39,27,25,-40,23,-15,40,-16,-90,3,8,32,23,-24,-66,-37,-35,-31,-44,-31,-46,-7,30,-69,-29,49,19,15,-12,0,-86,16,-27,-66,-27,17,2,-53,35,-31,54,-9,14,-127,30,49,-26,28,7,-33,-7,20,34,-65,30,-8,14,6,-19,-8,-13,73,-25,47,-6,-28,5,-47,7,49,19,5,-16,42,-6,79,-12,-49,-55,-19,-20,45,52,68,-6,-12,10,1, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.036225743591785431, 0.020580548793077469, 0.010084695182740688, 0.013740566559135914, 0.016790760681033134, 0.015252718701958656, 0.018944317474961281, 0.012134463526308537, 0.015596517361700535, 0.015718825161457062, 0.038752555847167969, 0.02617252990603447, 0.014640077017247677, 0.011549699120223522, 0.022233171388506889, 0.023380819708108902, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 18484, 55183, -419, -1440, 17876, -5278, -1961, -1937, 5266, 16078, -477, -58, 629, 3433, 4776, -11480, -4281, 29, 526, 14234, -10729, 17927, -5302, 13873, 22838, 3042, -932, 17528, 19723, -17786, -31, 25422, 28689, -10781, 4797, -498, -252, 730, 1041, -10901, -4307, -482, -7223, -519, 33405, -1386, 12322, -943, -14943, 9, -11, 2343, -3429, 18661, -4136, 15178, 26631, -1650, 44622, -1178, -9036, -1599, -472, -535, -182, 11081, -1534, -9621, -1770, 4201, -627, -6405, 1413, -924, -5562, -6320, 381, -2882, 38909, -7095, -5202, -15263, 927, 670, 59907, -12758, -10056, -27832, -7490, 15017, -1698, 37117, -1153, -2102, -2392, 2982, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00013572597526945174, 0.00010265381570206955, 0.00013909106201026589, 0.0002014177298406139, 0.00021179106261115521, 0.00016275074449367821, 4.8231449909508228e-05, 8.6451524111907929e-05, 0.00022936468303669244, 0.00015771419566590339, 0.00037514133146032691, 0.00012511934619396925, 0.00033595500281080604, 0.0002318277838639915, 0.00037801344296894968, 0.00011569691559998319, 0.00022874775459058583, 0.00019900483312085271, 0.00019004332716576755, 8.2434969954192638e-05, 7.5443029345478863e-05, 4.917016121908091e-05, 0.00013351008237805218, 5.3588290029438213e-05, 6.209481944097206e-05, 9.1352405434008688e-05, 0.00013781881716568023, 0.00015804021677467972, 7.659952825633809e-05, 0.00055685767438262701, 0.00033755562617443502, 0.00020046948338858783, 9.9327080533839762e-05, 0.00014148261107038707, 0.00021172661217860878, 0.00046500802272930741, 0.00046876902342773974, 0.00023352664720732719, 0.00020807940745726228, 7.0973444962874055e-05, 0.00023398088524118066, 0.00020798628975171596, 0.00040526979137212038, 0.00011836004705401137, 0.00030762780806981027, 0.00010796438436955214, 9.13047551875934e-05, 0.00046796447713859379, 0.00062958634225651622, 0.00010148087312700227, 0.00055460695875808597, 0.00016717216931283474, 0.00016982624947559088, 0.00014405290130525827, 0.00020442920504137874, 0.00012285314733162522, 0.0001110010125557892, 0.00042835620115511119, 3.8705609767930582e-05, 0.0001918640045914799, 0.00032603301224298775, 0.00035461437073536217, 0.00016783850151114166, 0.00017077750817406923, 0.00016008985403459519, 0.00016719350242055953, 0.00028633131296373904, 0.00022768641065340489, 0.00023166491882875562, 9.7519427072256804e-05, 0.00019222375703975558, 0.00010493358422536403, 0.00030822068220004439, 0.00016316048277076334, 0.00013080642384011298, 0.0003060577146243304, 0.00014631438534706831, 8.1754107668530196e-05, 6.696107448078692e-05, 0.00018134382844436914, 0.0001792397815734148, 0.0002104029554175213, 0.00018437831022311002, 0.00033511579385958612, 6.1104889027774334e-05, 0.00010303797171218321, 8.6994681623764336e-05, 0.00050065532559528947, 0.0002813678584061563, 0.0001217307653860189, 0.00039084904710762203, 3.2468953577335924e-05, 0.00014914899657014757, 0.0001029554259730503, 0.00040890480158850551, 0.00032198001281358302, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -50,-65,-16,127,20,81,105,-60,-13,-20,-17,-8,-26,1,37,9,-10,-48,27,19,25,-127,127,12,-96,0,53,-26,-127,-127,41,25,6,35,54,-15,-34,-8,32,0,-16,29,-101,71,18,-76,34,42,-21,51,-25,18,2,-9,14,46,-99,-46,-51,-18,-9,3,17,39,65,-24,78,14,-7,17,22,127,24,19,39,5,-13,19,127,-6,-19,30,-30,17,118,20,-78,-16,7,-44,-15,-54,4,-32,-19,18, 127,-127,74,101,-43,127,71,-119,64,3,-16,127,127,-93,-14,28,15,127,125,-114,127,-71,82,77,-122,-127,-78,-31,-50,47,-58,-23,-90,52,-127,-79,-43,-15,-47,80,-4,127,127,87,-53,-125,-109,-51,-18,-127,45,80,74,-33,49,75,-50,45,-79,-110,-43,-39,-58,66,67,-58,22,30,-80,35,-17,87,116,127,23,15,-1,56,-38,54,61,127,127,-23,-9,71,-120,127,-121,-98,2,-127,-85,-127,-41,94, -77,-15,28,-82,11,-31,101,-5,77,-39,-27,19,-16,-3,-7,-4,-7,-19,12,-10,-2,-72,39,9,-127,96,-1,-52,106,50,-13,3,-7,23,12,-27,-6,33,21,22,23,14,-109,63,14,-29,31,15,-17,12,-16,5,-2,-2,1,22,-77,7,-40,50,3,43,42,-1,-2,-38,-30,23,7,5,-1,46,10,-25,2,12,-10,-4,-87,3,-24,-9,-17,6,-114,8,-36,-24,-47,18,-29,-47,26,-29,-18,-2, 
  /* [0][1][][] */ -69,-71,70,-36,-49,112,20,127,-52,-24,-3,-122,25,-115,79,47,-7,-63,-21,90,46,-56,49,58,-105,-18,127,-19,-27,56,125,-109,-127,96,-84,-55,-40,29,-25,106,-52,-30,-7,57,-57,127,-25,64,17,94,19,-4,21,-53,24,26,127,125,-67,-81,127,-29,-30,127,67,-36,-15,1,127,46,127,92,-40,98,4,16,14,22,-32,10,-47,118,-82,101,1,30,-57,31,88,-127,-32,-16,127,-71,-23,-6, 70,127,56,-120,127,95,101,37,-127,127,127,-38,-65,-127,-127,127,127,-62,-127,-53,87,96,-121,127,-120,-102,-58,127,-123,105,-127,-127,-80,127,100,127,127,-127,-101,127,-63,-104,97,-127,-127,-29,-127,-127,127,-110,85,37,127,127,127,-127,106,-127,-127,127,17,-77,-127,-95,-127,127,-127,127,-125,-123,-105,-89,-127,-79,127,127,-127,127,-83,127,127,33,-46,-127,57,127,88,47,127,9,127,1,-65,35,127,-127, -58,-14,-52,40,-60,-101,49,-22,14,-40,-28,90,3,97,14,24,-2,66,-5,127,18,-74,-35,15,-86,104,-91,-18,-81,-13,17,-67,-81,45,1,-18,-27,44,-63,58,127,-4,-35,31,-44,-59,9,47,9,121,-13,1,-20,-70,8,18,91,5,-12,25,-32,127,95,-48,-41,13,34,-8,-81,127,-14,-71,-2,-51,-15,-13,30,25,77,-35,-73,-28,60,15,-54,-21,69,21,25,51,-47,10,-40,94,-26,-6, 
  /* [0][2][][] */ -75,-2,-6,-11,10,-42,82,31,58,-29,-40,-7,13,23,-25,13,-11,67,4,2,-43,-88,6,1,-18,-74,38,-66,72,34,29,20,4,-3,-16,-45,-7,37,2,22,-21,-6,-66,108,0,41,13,38,-13,-23,11,-22,35,-1,7,13,-80,28,-23,18,18,3,-11,-3,2,-46,-47,16,-31,21,30,39,15,-18,35,13,19,15,-76,-12,-12,-5,13,17,-127,3,18,-41,-59,-59,-28,-45,14,57,-17,-10, 120,29,-127,-28,-73,-18,64,33,-60,-32,-23,-106,-79,117,-11,52,-2,-50,-12,-126,81,-58,-35,1,-126,115,-60,21,-43,-20,-5,-13,-71,24,16,10,-17,-26,127,81,9,-14,70,-26,-38,84,-68,-40,-33,3,-127,-127,-36,-26,3,38,-71,-5,-10,39,-5,-16,8,-42,-53,34,60,-22,117,121,-20,-62,13,-52,1,10,95,11,58,19,10,-90,-57,2,0,4,127,42,-64,29,-25,-113,42,78,-8,25, -61,8,-22,36,9,-72,-127,7,-2,-12,-18,6,10,-17,22,9,-6,-17,6,17,-30,-74,20,10,20,-117,12,3,-57,-38,-5,9,26,-7,-8,-26,-34,9,45,-18,26,0,-44,-24,3,71,19,20,-7,9,10,-15,37,3,-1,-4,-76,-9,-15,-41,-10,16,92,-9,34,-3,8,28,-2,16,2,37,-18,17,0,21,38,11,88,-12,1,5,-8,-14,69,-14,47,-38,61,28,-20,-70,-5,7,-13,-13, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0057683535851538181, 0.0043627871200442314, 0.0059113702736794949, 0.00856025330722332, 0.0090011199936270714, 0.0069169062189757824, 0.0020498365629464388, 0.003674189792945981, 0.0097479987889528275, 0.00670285290107131, 0.015943506732583046, 0.0053175720386207104, 0.014278086833655834, 0.0098526803776621819, 0.016065571457147598, 0.0049171186983585358, 0.0097217792645096779, 0.0084577053785324097, 0.0080768410116434097, 0.0035034860484302044, 0.003206328721717, 0.0020897318609058857, 0.0056741782464087009, 0.0022775023244321346, 0.0026390296407043934, 0.0038824772927910089, 0.0058572995476424694, 0.0067167091183364391, 0.0032554799690842628, 0.023666450753808022, 0.014346113428473473, 0.008519953116774559, 0.0042214007116854191, 0.0060130106285214424, 0.0089983809739351273, 0.019762840121984482, 0.019922683015465736, 0.0099248820915818214, 0.0088433744385838509, 0.0030163712799549103, 0.0099441874772310257, 0.0088394172489643097, 0.017223965376615524, 0.0050303018651902676, 0.013074181973934174, 0.004588486161082983, 0.0038804518990218639, 0.019888490438461304, 0.026757419109344482, 0.0043129371479153633, 0.023570796474814415, 0.0071048173122107983, 0.0072176153771579266, 0.0061222482472658157, 0.0086882412433624268, 0.0052212588489055634, 0.004717542789876461, 0.018205137923359871, 0.0016449884278699756, 0.0081542199477553368, 0.013856402598321438, 0.015071110799908638, 0.0071331360377371311, 0.0072580440901219845, 0.0068038185127079487, 0.0071057239547371864, 0.012169080786406994, 0.0096766725182533264, 0.0098457587882876396, 0.004144575446844101, 0.0081695094704627991, 0.0044596772640943527, 0.013099378906190395, 0.0069343200884759426, 0.0055592725984752178, 0.013007452711462975, 0.0062183612026274204, 0.0034745493903756142, 0.0028458456508815289, 0.0077071124687790871, 0.0076176906004548073, 0.0089421253651380539, 0.0078360782936215401, 0.01424242090433836, 0.0025969576090574265, 0.0043791136704385281, 0.0036972737871110439, 0.021277850493788719, 0.011958133429288864, 0.0051735574379563332, 0.016611084342002869, 0.0013799305306747556, 0.0063388319686055183, 0.0043756053782999516, 0.01737845316529274, 0.013684150762856007, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 1279, 7579, 15059, 20441, 16677, -3414, -2283, 7537, 21357, -3418, 10051, 5417, 12828, 16835, 32782, 1408, 2172, 5736, 14743, 5224, -110, 304, 14929, -1014, 6750, 136, 12969, 11659, 5150, 36878, 56458, 19992, 10087, -899, 8744, 2731, 2111, 6269, 27438, -896, 12057, 10076, 32759, -4456, 46107, 5564, 5808, 26478, 74330, 10320, -802, 9397, -4622, -622, -2210, 7795, 82, 15537, 6693, 12224, 6198, 13185, 14352, 6435, 14136, 8457, 5429, -6024, 7413, -3190, 3865, 17578, 21206, 7435, -3207, -3312, 7671, 217, 2873, -1538, 33647, 15827, 5048, 22934, 3398, 698, 10018, 106547, 7202, 10441, 13166, 305, 7777, 10746, 9797, 15087, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00020255857089068741, 0.00019636830256786197, 0.00012171201524324715, 0.00011034440103685483, 0.00018399274267721921, 0.00031749386107549071, 0.00038426675018854439, 0.00020755776495207101, 0.00010843450581887737, 0.0003658240893855691, 0.00026389010599814355, 0.0001611113257240504, 0.00010302892042091116, 0.00013510555436369032, 7.3900831921491772e-05, 0.00035644226591102779, 0.00020670157391577959, 0.00021802575793117285, 0.00015539614832960069, 0.00021791293693240732, 0.00031819086871109903, 0.00060089858015999198, 0.00013008405221626163, 0.00057334068696945906, 0.00039888327592052519, 0.00017497598310001194, 0.00017323643260169774, 0.00012325767602305859, 0.00032757539884187281, 9.5960138423833996e-05, 5.0072216254193336e-05, 0.00012526677164714783, 0.00016651491750963032, 0.00030093605164438486, 0.00022819194418843836, 0.00017840521468315274, 0.00020709670206997544, 0.00025411590468138456, 9.4448085292242467e-05, 0.00063455966301262379, 0.00014977673708926886, 0.00015872996300458908, 8.2566541095729917e-05, 0.00023552367929369211, 7.1838418080005795e-05, 0.00024236539320554584, 0.00027805872377939522, 0.0001038817354128696, 5.641068855766207e-05, 0.00019875737780239433, 0.00018513371469452977, 0.00018265547987539321, 0.00025165427359752357, 0.00017958336684387177, 0.00048384434194304049, 0.00013849178503733128, 0.00028011060203425586, 0.00012102877371944487, 0.00030631062691099942, 0.00011611521040322259, 0.00025483514764346182, 0.00010252306674374267, 0.00010670310439309105, 0.00015724464901722968, 0.00018355598149355501, 0.00022418260050471872, 0.00023600655549671501, 0.00021837335953023285, 0.00022836615971755236, 0.00024494904209859669, 0.00027489080093801022, 8.9545086666475981e-05, 9.8222786618862301e-05, 0.00014663698675576597, 0.00047488449490629137, 0.00039900984847918153, 0.00022665089636575431, 0.00027742751990444958, 0.00025841401657089591, 0.00027134612901136279, 6.437203410314396e-05, 0.0001023451768560335, 0.00015703507233411074, 8.5034851508680731e-05, 0.00035110910539515316, 0.00018454364908393472, 0.00022426906798500568, 3.5783097700914368e-05, 0.0001914912136271596, 0.00021647980611305684, 0.00010158315126318485, 0.000407981569878757, 0.00017753723659552634, 0.00014706344518344849, 0.0001204057116410695, 0.00011454379273345694, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -8,78,-33,97,-16,-7,29,-8,75,47,-66,85,26,-127,-6,-115, 
  /* [1][0][][] */ 34,56,7,-19,7,-1,89,-127,8,95,-17,23,11,-29,85,34, 
  /* [2][0][][] */ -44,33,13,-66,-1,20,25,50,-102,79,127,10,-51,-25,66,-4, 
  /* [3][0][][] */ -17,-8,98,-4,-80,49,28,62,-5,101,-127,-17,7,-79,-57,-49, 
  /* [4][0][][] */ 8,-15,-51,39,-27,-19,8,20,72,-2,-27,-14,-18,-1,-127,-48, 
  /* [5][0][][] */ -29,-39,15,8,40,-7,23,20,-78,81,-15,-127,45,56,-70,-41, 
  /* [6][0][][] */ 15,-4,-26,-51,70,45,-102,-58,-16,17,98,-4,127,-29,-6,-68, 
  /* [7][0][][] */ 0,42,127,-44,-26,-71,23,-43,-73,60,-28,-53,29,-49,77,-30, 
  /* [8][0][][] */ 88,10,63,2,-49,42,48,5,10,-10,33,-37,-10,-17,-127,-30, 
  /* [9][0][][] */ 39,-127,58,58,26,12,35,-7,85,9,73,-5,3,42,-69,-6, 
  /* [10][0][][] */ -60,-82,-13,-41,-37,-2,40,38,45,61,14,16,-67,55,127,29, 
  /* [11][0][][] */ 83,-59,45,-103,34,-22,-127,-125,-49,8,38,-50,-19,-18,-29,30, 
  /* [12][0][][] */ -46,21,-63,8,-64,-18,-71,28,-35,-88,12,28,45,103,127,62, 
  /* [13][0][][] */ -35,-74,-30,97,4,-127,31,-46,123,91,78,-10,6,59,121,64, 
  /* [14][0][][] */ -35,-101,61,-8,17,-4,1,80,9,27,14,-56,36,34,-80,127, 
  /* [15][0][][] */ 10,-23,6,30,29,8,71,-16,-18,-127,8,-67,-10,-21,-8,-23, 
  /* [16][0][][] */ 7,-52,-1,-4,21,-34,67,-26,127,58,100,-15,32,114,22,94, 
  /* [17][0][][] */ -53,-40,105,121,55,32,41,-72,127,-15,-9,-32,-46,-34,5,34, 
  /* [18][0][][] */ -12,42,-70,45,-127,-48,1,32,-40,1,-45,-87,13,-104,23,-41, 
  /* [19][0][][] */ 42,-59,91,-97,106,-20,-74,64,68,-127,99,19,-79,19,13,68, 
  /* [20][0][][] */ 18,-5,80,-40,33,12,16,12,-6,-12,127,-75,19,36,-13,96, 
  /* [21][0][][] */ -39,-42,-26,-16,-17,7,-33,-7,39,77,34,-19,-127,5,19,36, 
  /* [22][0][][] */ 29,-80,79,-43,25,-79,47,-68,-117,44,-34,-59,-23,19,127,-77, 
  /* [23][0][][] */ 25,-8,21,-10,-1,-16,-8,-3,-31,-1,25,-20,127,13,20,-26, 
  /* [24][0][][] */ -31,-26,-22,-74,-59,-22,42,6,-93,-12,-25,-127,16,-100,64,-18, 
  /* [25][0][][] */ -46,0,-2,-74,40,-38,-127,-98,-126,9,-15,-22,-57,-73,12,-13, 
  /* [26][0][][] */ 57,-6,99,-127,65,-19,1,-48,55,21,122,6,-69,61,-7,105, 
  /* [27][0][][] */ 97,-17,50,-66,-26,-59,-9,-36,-32,15,-127,16,-26,-17,-20,60, 
  /* [28][0][][] */ -79,-1,-127,-47,40,-76,98,-2,-82,67,-46,19,36,23,-46,42, 
  /* [29][0][][] */ -20,-46,10,127,-25,-6,8,-61,-47,-27,-17,3,2,-56,80,-42, 
  /* [30][0][][] */ 100,-67,123,-51,62,95,19,88,-18,-87,-4,-127,-23,15,-78,39, 
  /* [31][0][][] */ 64,-97,-79,-47,-23,-100,52,-61,48,43,92,-23,41,118,36,127, 
  /* [32][0][][] */ -31,100,31,41,-127,50,-31,-51,-71,4,33,87,13,72,44,63, 
  /* [33][0][][] */ -5,-19,21,101,33,-8,2,-11,-106,10,48,30,-16,10,25,127, 
  /* [34][0][][] */ -4,11,19,-31,32,-2,-127,-18,17,76,-24,36,-54,-7,1,-8, 
  /* [35][0][][] */ 51,-23,-62,10,15,-127,-14,1,-25,-16,-109,-99,27,31,-29,13, 
  /* [36][0][][] */ 23,19,-127,38,51,37,-87,-4,-49,-22,-13,25,4,40,-67,-11, 
  /* [37][0][][] */ 18,17,127,6,-40,14,48,2,-6,36,-12,2,35,6,-1,22, 
  /* [38][0][][] */ -100,99,42,60,-16,40,17,-95,-14,-24,116,-15,-71,-25,-127,-118, 
  /* [39][0][][] */ -21,-2,42,45,20,-27,-127,45,-16,60,12,-50,14,-46,-11,-39, 
  /* [40][0][][] */ -41,88,-80,67,-6,67,24,108,0,-54,-127,31,5,-51,-16,-109, 
  /* [41][0][][] */ 12,33,-50,41,-47,-33,125,73,-46,127,-38,-19,-16,74,56,-41, 
  /* [42][0][][] */ 23,-32,8,-31,-2,72,-101,-13,16,-47,127,-9,-7,40,-66,-52, 
  /* [43][0][][] */ -80,-18,66,-28,3,10,-95,-29,-21,21,62,-18,-127,-39,12,-19, 
  /* [44][0][][] */ 0,-22,-26,38,24,7,-41,-45,127,-6,41,45,36,123,32,36, 
  /* [45][0][][] */ 32,-62,-21,-35,65,-2,-31,127,25,-65,-14,12,61,-4,41,31, 
  /* [46][0][][] */ -47,21,-25,123,-80,-4,-29,-58,-127,57,-70,10,16,20,-5,-46, 
  /* [47][0][][] */ -46,27,-127,106,35,106,-8,-10,22,10,22,94,-20,-14,65,-11, 
  /* [48][0][][] */ 16,15,75,-127,64,4,-28,-19,-20,39,40,-53,-34,7,95,28, 
  /* [49][0][][] */ 93,-24,127,76,14,4,-41,-35,73,-10,-9,-31,16,-86,-126,-82, 
  /* [50][0][][] */ -17,58,26,-127,26,63,-29,33,87,-52,-26,11,-30,-58,16,-10, 
  /* [51][0][][] */ 22,-127,-18,33,103,-12,-69,-112,39,-122,-17,45,-15,1,-5,28, 
  /* [52][0][][] */ -19,41,-50,29,5,29,-53,91,-72,127,-49,-14,121,74,14,-23, 
  /* [53][0][][] */ 7,62,71,-127,9,-27,-5,-38,-37,-15,1,50,17,-94,-89,-74, 
  /* [54][0][][] */ 16,20,37,12,15,-12,-5,-37,-4,19,-16,-10,7,127,-17,16, 
  /* [55][0][][] */ -78,127,111,-3,17,9,-6,23,-62,26,93,-8,-16,-50,97,12, 
  /* [56][0][][] */ 16,23,20,-47,32,4,-18,14,14,-59,31,127,12,39,89,24, 
  /* [57][0][][] */ -35,49,15,40,-43,14,15,127,-13,46,56,-60,-10,40,38,-1, 
  /* [58][0][][] */ -40,127,-13,-75,26,97,10,60,108,-20,73,89,-17,-36,35,52, 
  /* [59][0][][] */ 89,127,48,-82,-91,45,-12,-16,38,61,96,-74,-52,-72,-126,40, 
  /* [60][0][][] */ 43,20,111,-22,-60,127,11,-40,-28,40,-39,15,24,64,53,-18, 
  /* [61][0][][] */ -25,-5,8,-42,-45,-22,127,122,-48,125,-38,-22,3,49,80,-54, 
  /* [62][0][][] */ -69,-84,-47,-37,-79,50,-65,-8,-127,-51,-27,-90,21,-86,121,39, 
  /* [63][0][][] */ -13,-1,-38,-127,26,20,-99,-117,-28,77,-8,-59,71,5,4,-33, 
  /* [64][0][][] */ -68,0,23,10,91,-29,-71,-127,20,-126,-57,-43,-52,8,-12,66, 
  /* [65][0][][] */ -127,25,28,-22,-10,39,28,-55,-60,23,11,6,59,36,-7,-14, 
  /* [66][0][][] */ 97,-4,127,5,-90,88,-25,88,-68,-90,60,-51,-11,101,-77,-34, 
  /* [67][0][][] */ 60,-14,32,109,59,-98,-61,-93,56,-78,-127,21,-98,-13,-31,-79, 
  /* [68][0][][] */ -73,-45,-49,63,-32,-127,55,-31,-12,40,50,-49,23,85,50,-8, 
  /* [69][0][][] */ -17,-26,-18,35,-2,-127,4,47,46,-38,55,4,76,-4,15,39, 
  /* [70][0][][] */ 18,14,-8,-11,0,19,127,81,5,58,0,-17,10,48,3,3, 
  /* [71][0][][] */ -92,38,-106,-17,103,39,27,61,-53,-61,5,-35,-62,-96,127,18, 
  /* [72][0][][] */ 28,46,-86,-30,45,4,-59,-88,28,-28,-127,-22,78,70,61,48, 
  /* [73][0][][] */ -41,-127,-99,1,-122,-10,35,-43,-39,87,-2,-53,-14,-70,54,-57, 
  /* [74][0][][] */ -13,1,61,46,-38,-6,-127,43,17,-31,-66,-41,18,-10,-38,33, 
  /* [75][0][][] */ -47,15,-24,-25,-25,36,26,89,-12,51,14,-26,-127,36,-15,66, 
  /* [76][0][][] */ 44,-10,25,1,-16,-79,-83,-127,-79,-19,-66,31,125,66,3,46, 
  /* [77][0][][] */ -53,15,-35,-28,-87,-39,-9,-49,127,-33,-106,6,10,-1,20,-109, 
  /* [78][0][][] */ -68,-127,2,84,102,53,2,61,-9,-85,-99,-13,12,9,94,-25, 
  /* [79][0][][] */ 35,1,17,-48,76,11,127,-4,77,14,-12,-44,9,-61,33,-74, 
  /* [80][0][][] */ 50,-21,127,-101,18,-78,29,11,-81,9,17,-58,23,127,-127,66, 
  /* [81][0][][] */ 86,-48,-9,113,-20,19,-36,36,-43,-13,-30,-52,29,38,-116,127, 
  /* [82][0][][] */ -18,-3,9,-95,24,-21,45,-12,18,23,-70,-55,26,-97,-127,-17, 
  /* [83][0][][] */ -26,7,-39,-89,-5,-57,-60,39,-114,-46,47,-86,4,-51,38,127, 
  /* [84][0][][] */ 127,-19,-8,52,-14,10,-49,37,-59,-26,76,-82,-82,0,90,-76, 
  /* [85][0][][] */ 29,-33,-2,-17,43,-30,-42,111,-74,-109,-65,-61,24,96,120,-127, 
  /* [86][0][][] */ 57,27,-11,12,33,-4,-127,65,-53,-88,45,-37,-21,-115,29,34, 
  /* [87][0][][] */ 127,-118,28,32,-16,1,19,21,40,3,-90,-47,94,6,1,-49, 
  /* [88][0][][] */ 11,40,18,-65,-8,-69,38,-32,58,-17,70,21,-37,-29,127,-84, 
  /* [89][0][][] */ 51,58,-80,-3,-83,4,8,-50,30,22,-12,-9,-16,-30,22,-127, 
  /* [90][0][][] */ -77,-3,-29,-117,-78,34,68,-127,68,8,-9,-42,-6,-65,-99,2, 
  /* [91][0][][] */ 16,15,2,-69,-8,-15,43,14,-127,101,65,109,76,55,99,81, 
  /* [92][0][][] */ -13,-12,21,35,93,-71,-13,-127,116,-26,20,-72,-68,-92,-85,-24, 
  /* [93][0][][] */ 123,-73,27,-85,16,25,-41,97,30,-127,63,-33,22,124,38,6, 
  /* [94][0][][] */ -96,125,-127,-47,87,-38,-17,-46,-31,20,120,21,-26,-55,-45,-46, 
  /* [95][0][][] */ -7,65,-52,-127,-36,-7,8,7,-4,5,-55,-49,-12,-12,-22,7, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00073311122832819819, 0.00071070704143494368, 0.00044050687574781477, 0.0003993645659647882, 0.00066591671202331781, 0.0011490914039313793, 0.001390759483911097, 0.00075120455585420132, 0.00039245217340067029, 0.0013240107800811529, 0.00095508573576807976, 0.00058310304302722216, 0.0003728879673872143, 0.00048898148816078901, 0.0002674659772310406, 0.0012900555739179254, 0.00074810581281781197, 0.00078909093281254172, 0.00056241836864501238, 0.00078868260607123375, 0.0011516140075400472, 0.0021748053841292858, 0.00047080739750526845, 0.0020750663243234158, 0.0014436604687944055, 0.00063328276155516505, 0.00062698690453544259, 0.00044610101031139493, 0.0011855789925903082, 0.00034730424522422254, 0.00018122413894161582, 0.00045337242772802711, 0.00060266000218689442, 0.0010891644051298499, 0.00082588492659851909, 0.00064569403184577823, 0.00074953585863113403, 0.00091971032088622451, 0.00034183173556812108, 0.0022966335527598858, 0.00054208026267588139, 0.00057448429288342595, 0.00029882939998060465, 0.00085242034401744604, 0.00026000157231464982, 0.00087718229042366147, 0.0010063655208796263, 0.00037597454502247274, 0.00020416469487827271, 0.00071935373125597835, 0.00067004619631916285, 0.00066107686143368483, 0.00091080105630680919, 0.0006499580922536552, 0.0017511562909930944, 0.00050123716937378049, 0.0010137917706742883, 0.00043803403968922794, 0.0011086163576692343, 0.00042025060974992812, 0.00092231354210525751, 0.00037105716182850301, 0.0003861857985612005, 0.00056910852435976267, 0.00066433596657589078, 0.00081137410597875714, 0.0008541680290363729, 0.00079034897498786449, 0.00082651549018919468, 0.00088653317652642727, 0.00099490000866353512, 0.0003240865480620414, 0.00035549336462281644, 0.00053071673028171062, 0.0017187283374369144, 0.0014441185630857944, 0.00082030746852979064, 0.0010040811030194163, 0.00093526631826534867, 0.00098207092378288507, 0.00023297882580664009, 0.00037041332689113915, 0.00056835002033039927, 0.00030776284984312952, 0.0012707535643130541, 0.00066791061544790864, 0.00081168703036382794, 0.00012950817472301424, 0.0006930556264705956, 0.00078349572140723467, 0.00036765536060556769, 0.0014765894738957286, 0.0006425526225939393, 0.00053226016461849213, 0.0004357790166977793, 0.00041456325561739504, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -5692, 9777, -18621, 42466, 14948, 4075, -13705, -11654, 13345, -1937, 22524, 27768, -865, 18185, 54077, -18722, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.0004320576845202595, 0.0003613682056311518, 0.0002754575980361551, 0.00016729047638364136, 0.00029387124232016504, 0.00032404254307039082, 0.00025656941579654813, 0.00034010870149359107, 0.00022135081235319376, 0.00023452387540601194, 0.00033653003629297018, 0.00062324461759999394, 0.00047088091378100216, 0.00048786198021844029, 0.00042383265099488199, 0.00031290619517676532, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ -1,14,17,16,47,65,4,13,24,12,5,2,-9,4,19,56,28,-19,14,-15,106,-28,19,20,-34,-13,-13,-93,-8,-3,25,5,115,48,-2,-19,15,-23,-5,3,-31,6,26,-54,-6,-7,-24,32,-12,18,20,2,-23,-15,37,-21,40,42,2,-24,-59,14,19,16,-7,20,51,-16,24,39,36,-49,-65,27,14,-30,-30,-83,-8,-13,43,-31,-47,-55,36,-6,16,50,-28,-10,27,-38,38,18,4,127, 
  /* [1][0][][] */ 48,-73,17,51,-8,-55,-7,-67,9,-64,11,65,-1,-56,-31,-51,-72,-16,-17,16,-37,-52,-22,26,112,-25,-68,58,-18,69,-23,39,-19,0,-31,24,-6,-11,83,-19,5,-63,39,6,-59,-1,56,0,26,25,0,-34,68,-36,21,-35,26,18,-20,-82,24,-38,47,-16,-39,-56,23,55,10,30,-24,15,-127,1,-26,29,18,58,5,-16,3,34,-44,3,-36,19,21,59,-49,27,-5,23,5,-43,23,-24, 
  /* [2][0][][] */ 2,12,60,-38,29,7,38,59,29,-1,-11,7,-32,17,64,-9,9,-18,12,18,-8,-34,81,-22,-17,0,-9,-75,-18,43,51,-41,63,-54,5,50,35,90,-12,-32,-37,-26,-10,46,4,-59,-27,42,49,21,-17,-8,59,7,17,-32,-39,25,55,16,10,-15,75,127,31,-59,12,-71,0,2,88,11,-19,14,-39,16,17,47,-1,2,69,122,21,-30,27,-15,0,18,14,-14,-4,-46,-32,-4,-6,50, 
  /* [3][0][][] */ -33,-8,-52,19,1,-12,-30,-40,-19,40,-1,-35,-2,-35,46,14,35,-37,57,4,-16,-22,18,24,-17,13,-12,-38,32,-50,43,-13,-11,-30,-60,30,-1,7,-50,18,12,-94,-21,-53,-10,8,9,14,-127,69,3,55,-124,-11,-32,-35,41,-22,-58,49,-14,10,-21,13,-17,-117,-50,16,27,-6,-39,10,-40,13,-34,11,-11,-61,21,-63,6,-2,-6,89,35,78,41,38,63,-43,-10,-34,-60,9,-23,-34, 
  /* [4][0][][] */ -18,-32,52,-53,-2,-16,-44,14,-50,-59,-36,41,13,86,-8,-39,34,-25,19,-12,7,23,5,-36,-17,-4,22,17,-1,-25,34,3,-51,12,39,14,18,-20,-33,7,18,21,-69,-57,22,-13,2,-11,1,82,-18,0,-33,29,28,-49,-7,-51,28,34,4,11,16,-12,31,-120,22,-25,-21,60,4,5,22,23,-41,-4,-29,72,74,-27,25,-11,127,-65,25,-16,-22,18,77,16,6,-20,-20,28,13,-33, 
  /* [5][0][][] */ -16,-16,-72,16,-2,-53,-11,98,48,-25,-26,-2,-2,27,104,5,-38,-8,24,-22,-47,-18,9,-45,-11,7,18,95,58,8,32,42,-87,33,5,-10,-40,-58,23,-25,-25,-5,12,-7,35,29,19,-2,25,25,30,16,-41,-15,29,-36,-41,-2,26,44,-64,-5,-39,-33,23,28,-35,-15,1,13,41,-2,24,6,-4,-11,16,24,13,89,34,-51,49,39,25,6,-16,-46,17,-7,-1,-99,-18,-18,4,-127, 
  /* [6][0][][] */ -34,-19,39,-53,22,-52,-50,20,26,43,-26,-36,64,-48,-15,-6,3,-65,45,17,27,20,-12,4,92,9,-9,-31,-6,-24,19,-17,-40,31,-6,-28,40,59,-21,25,5,-24,-67,-33,-8,-25,16,-127,41,51,50,-11,2,26,-6,-44,37,-35,10,3,19,49,-15,12,31,57,25,-1,-51,1,23,-54,38,-1,65,-18,-23,39,16,12,1,29,33,-31,33,71,29,-4,38,3,-27,-13,-40,9,-1,-7, 
  /* [7][0][][] */ 33,-4,41,-47,9,12,-17,-51,-7,-16,-11,29,13,-89,40,27,26,-13,4,-20,26,1,-51,-12,-29,1,1,12,-20,24,14,-19,-21,-20,9,-29,3,4,-19,-7,41,-15,-20,17,-24,26,0,65,-22,67,-47,-8,-46,23,10,-92,31,1,-4,19,-2,30,-20,-28,14,84,6,-33,-6,-9,-17,50,2,-24,-9,-42,33,14,25,4,12,-31,26,9,-42,127,23,39,-39,-16,11,33,-13,-3,9,15, 
  /* [8][0][][] */ -116,54,20,-8,15,22,26,26,-23,102,5,55,49,19,33,-34,-11,18,-101,22,21,64,-42,-50,-6,-33,20,12,40,-55,50,-20,24,-66,-15,50,-35,19,-9,54,70,-4,6,-127,-46,-30,93,-1,-72,9,-35,109,-113,29,32,-15,12,-8,-14,-31,-36,-23,41,39,-21,18,41,-44,41,-2,38,114,-34,22,66,-15,-36,-125,-2,-27,-19,-9,19,8,-43,-2,26,27,-13,57,0,-4,29,-25,38,17, 
  /* [9][0][][] */ 6,-58,-25,-27,-5,25,11,26,25,-29,36,1,-49,-73,9,23,27,-6,-1,-6,-13,45,29,-31,51,6,21,-67,-47,-74,-54,-46,23,19,57,35,21,57,1,35,4,9,7,-48,35,-49,33,-106,-14,-2,23,32,7,6,-12,39,-19,16,-6,26,32,12,50,35,-8,127,13,32,8,-14,44,-44,-27,-4,-43,28,75,-22,6,-24,-39,-4,44,-65,27,39,-14,-3,-66,15,-24,39,31,21,5,-33, 
  /* [10][0][][] */ 33,66,11,-5,68,-126,35,-23,12,27,61,-4,-26,21,22,-70,12,53,-35,25,-49,0,-28,-30,-66,-29,-55,65,-15,-5,-18,57,-38,-10,50,4,83,-29,-46,1,-44,88,29,12,-23,-42,-2,18,-7,-25,-35,-14,-3,11,-3,4,21,26,8,20,12,-17,29,12,29,48,35,31,17,2,95,51,-47,-49,-56,31,6,21,-5,-20,70,22,-83,-56,60,-48,99,3,-30,18,35,-6,83,30,2,-127, 
  /* [11][0][][] */ 38,43,-64,29,-16,11,75,-5,-6,-21,-15,25,-42,-10,42,-30,2,-27,-123,-1,13,23,36,-9,-56,-53,-3,5,10,42,-18,-1,-16,16,10,41,18,-1,6,50,-1,22,64,-103,28,-31,20,-3,-127,25,27,-35,26,25,-31,5,-16,-27,8,5,1,-23,7,4,-68,64,-15,-4,40,-11,50,19,-76,-47,18,48,6,-49,-47,2,25,0,120,69,0,-20,-19,-25,15,7,-36,11,-14,7,-22,13, 
  /* [12][0][][] */ -33,16,-21,0,-57,56,-26,-12,127,1,-20,-19,3,6,-42,-42,39,3,-9,37,50,10,-18,-5,1,-3,-19,-49,-77,-23,3,-45,30,5,-27,-15,2,14,-4,-24,-7,-39,6,31,18,34,-29,-22,29,37,-12,11,20,-3,-7,-6,57,-16,-22,14,19,3,8,-24,-14,35,-32,-2,-15,-21,-26,-39,19,25,-66,-7,35,-8,-2,-53,-20,-10,46,63,-20,-16,-33,-43,-3,-35,-7,40,-34,2,-7,7, 
  /* [13][0][][] */ 26,16,-12,12,25,1,4,13,11,12,22,-20,21,-14,1,-4,41,-50,-50,18,7,-48,-13,3,-9,26,0,2,-24,-48,-11,24,1,34,-6,14,24,8,-27,17,-10,-1,13,66,22,12,-43,-127,26,-2,16,2,6,9,5,12,5,8,3,23,19,12,-7,-17,7,-12,-20,-75,-3,6,-5,-52,7,49,-28,3,-17,-10,26,12,28,-2,-24,20,15,42,20,-7,14,-23,0,-8,-27,-4,-25,-14, 
  /* [14][0][][] */ -85,-64,-39,33,24,-65,-80,-42,7,3,6,7,65,-31,-105,-12,71,-51,24,2,-43,-45,9,-21,-127,-13,12,20,-46,-106,-25,-7,-47,25,42,-52,10,56,23,4,-13,36,-28,-52,-43,118,25,11,-102,73,24,9,-73,-20,10,-31,-1,-6,32,42,45,60,-36,39,-4,-35,-55,42,-11,51,-79,-116,-36,-12,-28,37,19,75,71,12,13,-39,17,8,25,21,3,-12,41,16,59,-17,-22,29,17,-73, 
  /* [15][0][][] */ 104,6,53,-1,-31,83,10,11,-6,50,-3,26,-64,-2,-44,66,2,37,21,3,3,7,-119,64,-18,1,33,40,33,71,-36,-60,45,-59,30,29,31,-41,-69,-126,-17,26,28,35,38,67,-25,-56,107,-40,-62,16,36,-127,10,-94,12,-46,36,23,-98,16,18,-8,74,-17,-32,52,-10,72,-23,21,21,18,24,-29,4,-40,58,7,-4,-11,58,88,-34,-29,6,-42,12,9,33,37,-54,75,10,-10, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.01836245134472847, 0.015358148142695427, 0.011706948280334473, 0.0071098450571298599, 0.012489527463912964, 0.01377180777490139, 0.010904200375080109, 0.014454619027674198, 0.0094074094668030739, 0.0099672647193074226, 0.014302526600658894, 0.026487896218895912, 0.020012438297271729, 0.020734133198857307, 0.018012886866927147, 0.013298513367772102, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 12320, -9623, 2635, 66359, -1513, -3126, -10967, 4276, -3132, 575, 2579, -1306, 3314, -10497, 6041, -7440, 329, 16862, 27065, 3118, -1739, -1852, 164, 749, 15662, -2163, -4011, -4595, -7195, -8238, 7795, -10397, 2296, 330, -160, 17368, 207, -7841, 18829, 647, -1530, 2585, -10145, -7274, -9279, 67481, -1822, 23287, 36190, -13318, 428, 10541, 5258, 516, -3996, 2593, -15842, 464, 1213, -3965, -469, 53, -10860, -3890, 1611, 16411, 35041, 29195, -10012, 521, -7524, -566, 30043, 10711, -117, 593, 19440, 31117, -850, -10171, -1353, -7279, 1718, -4190, 859, -1593, -208, -2396, 102, -3273, 767, -2480, -743, -795, 744, 44074, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00016028716345317662, 0.00010139701043954119, 0.00033993259421549737, 3.1774343369761482e-05, 0.00015461158182006329, 0.00019142757810186595, 0.00040179159259423614, 8.2980644947383553e-05, 0.00013576708442997187, 0.00039013740024529397, 0.00017176338587887585, 0.00035951161407865584, 0.00010396677680546418, 0.00030862813582643867, 0.00015421758871525526, 9.6841060440056026e-05, 9.8609474662225693e-05, 0.00027033238438889384, 6.2090948631521314e-05, 0.0001968708384083584, 4.917403930448927e-05, 0.00017741341434884816, 0.00013391432003118098, 0.00033282965887337923, 0.00026043466641567647, 0.00025181920500472188, 0.00012402811262290925, 0.00021991600806359202, 8.4998406236991286e-05, 9.9117627542000264e-05, 0.00011456614447524771, 0.00015693364548496902, 0.00013232583296485245, 0.00014724026550538838, 0.00019736457034014165, 0.00013122757081873715, 0.00043656222987920046, 0.00010885811207117513, 4.4951870222575963e-05, 0.00017950183246284723, 0.0001867135870270431, 0.00032026358530856669, 0.00038065511034801602, 0.00015827307652216405, 0.0001773781405063346, 6.6967826569452882e-05, 0.00020764625514857471, 0.00014235902926884592, 7.4325849709566683e-05, 0.00015321555838454515, 0.00019642789266072214, 0.00011808970884885639, 0.00022006095969118178, 0.00028703839052468538, 0.0003674220060929656, 0.00039752337033860385, 0.00023559527471661568, 0.00023355326266027987, 9.7279567853547633e-05, 7.8133365605026484e-05, 0.00033788455766625702, 0.00015400871052406728, 0.00030134443659335375, 0.00013086375838611275, 0.00021812903287354857, 0.00017678242875263095, 6.3818071794230491e-05, 5.9197027439950034e-05, 0.00042552041122689843, 0.00027328109717927873, 0.00016873709682840854, 7.4620642408262938e-05, 0.00019141676602885127, 0.0001576200156705454, 0.0001677676773397252, 0.00024753285106271505, 0.00051180308219045401, 5.4664775234414265e-05, 0.00026889235596172512, 0.00018731330055743456, 0.00017197197303175926, 0.00029139858088456094, 0.00015014391101431102, 0.00015240548236761242, 0.00013098616909701377, 0.00011414031177992001, 0.00014121377898845822, 0.00016526748368050903, 0.00024679885245859623, 0.00012026445619994774, 0.00017934344941750169, 0.00012188629625597969, 0.00014726718654856086, 0.00041887536644935608, 0.001672083861194551, 9.2980531917419285e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -17,1,-18,113,-19,21,-61,-56,24,-4,103,-5,-1,-8,0,67,4,16,-40,3,83,1,37,-40,-1,15,46,56,23,21,19,47,-3,27,9,-12,6,48,-44,-30,22,7,28,15,-75,-48,30,-5,-13,-21,-8,-9,49,2,-11,-2,-2,-31,21,-38,22,-3,127,24,-12,-11,3,-53,63,36,-20,8,69,-23,70,2,14,-127,31,65,5,14,127,-12,41,24,-29,-15,40,-7,-20,87,-1,20,-3,12, -50,10,-6,15,49,-6,-10,-127,43,15,-127,-4,-15,-10,9,96,17,-35,-22,-19,79,-99,127,21,-60,-33,-100,-14,29,32,-52,18,118,13,-14,3,-22,127,-56,-127,12,-21,-28,11,52,-127,127,-44,-76,52,46,4,42,-63,28,57,37,43,-96,81,127,34,3,-19,44,-36,-95,-3,39,-30,-16,54,-51,-35,108,-5,-27,-55,-36,67,-62,70,-3,14,-10,45,53,-36,-24,51,-15,80,-127,-29,22,-127, -2,-4,-21,-72,8,20,35,16,3,0,2,65,2,-12,-6,16,-13,15,-29,14,14,20,27,-37,-3,-30,16,15,-3,13,41,-78,41,16,11,-21,15,8,-24,-19,10,5,-15,6,26,-24,24,-1,5,-7,2,-6,10,5,-10,8,-8,49,15,-9,10,-20,-1,-15,-25,-18,18,-48,-113,-5,44,-5,-127,-26,-7,17,9,-9,6,14,-21,24,-26,2,-38,21,27,32,-22,-19,24,-5,18,11,-3,-51, 
  /* [0][1][][] */ -40,58,-16,48,-87,-15,-5,-42,31,94,-43,-21,-35,-26,-3,67,127,-22,-96,-16,65,-127,-27,7,-35,-43,-125,-2,37,41,-51,30,-122,-78,-58,4,65,0,-39,44,-19,84,2,-1,39,-44,-8,-32,127,47,-2,20,43,8,-40,-18,33,10,-127,127,-42,-87,22,127,-60,-37,-95,125,-39,127,-35,76,-31,-43,35,7,-37,-68,127,47,127,36,10,4,127,25,-91,50,-35,-37,-103,43,94,100,30,-56, 127,127,127,127,-44,-127,127,25,127,-127,20,-127,-110,127,127,127,-19,-127,-67,-127,127,22,-67,127,127,127,-54,-127,127,127,-127,127,-9,-127,-120,127,-127,-43,90,109,-127,-127,127,127,127,-119,-103,127,-15,127,-127,-127,-127,127,127,-127,127,-127,-42,38,-107,-25,-71,-64,127,127,-63,127,127,-104,-127,127,-46,127,-127,-127,-127,122,-75,127,-35,127,82,127,-37,-127,-18,-102,-127,-125,-21,-127,-22,-127,-127,121, -26,67,-35,6,127,68,-18,47,8,25,-16,-4,-27,-31,-9,0,-108,-21,-127,33,33,72,-14,-120,-37,-39,127,78,12,49,69,9,117,-51,127,-3,59,9,-86,16,35,23,-20,0,-19,-51,-11,-43,80,17,-13,40,-2,-7,-81,-13,30,23,127,-96,0,127,-6,-29,-112,-30,-80,102,9,-15,118,43,-27,-52,13,46,-29,-9,-41,-5,-49,8,44,30,-90,31,127,-44,33,-20,127,-6,-111,36,33,16, 
  /* [0][2][][] */ -6,-35,-21,-61,-4,18,44,28,1,11,-22,51,22,-36,-7,13,39,3,-6,13,-4,31,-17,-31,-1,-19,15,9,-6,2,48,-72,-50,63,-34,-27,33,-28,-67,13,13,7,-37,18,17,-94,-10,-1,-6,16,22,-8,11,-1,-23,6,3,52,-52,29,-7,-17,6,25,-9,-11,6,-47,-58,11,-39,2,-105,-37,-2,19,12,-9,58,16,21,39,-38,18,11,26,-22,18,12,27,17,-3,24,40,-5,-36, -30,-7,-26,29,-48,69,-22,62,4,-5,55,-13,127,-6,-17,-21,-4,-40,-71,13,-29,78,-48,-114,-48,-43,111,69,19,63,52,-4,-127,59,-11,-25,-26,-18,-127,-4,48,-12,-14,33,-20,-61,-21,-47,-60,36,70,26,-6,-80,37,55,19,28,73,-61,25,-64,-13,9,16,-27,-127,-55,-10,-31,-61,40,29,-42,-29,-7,-46,26,-54,5,46,49,15,17,5,60,-83,127,13,127,-36,-16,116,-20,47,81, -9,-35,-24,34,10,62,-41,8,5,-3,3,19,11,-51,-7,-13,-45,-6,6,11,-19,7,-24,4,-8,23,7,51,-1,12,33,28,11,40,21,-24,-3,-20,-44,6,14,-13,23,9,-70,-46,-14,3,-1,-11,1,-4,-3,5,-17,-5,10,-47,21,-32,-19,46,4,-23,-14,0,17,-47,43,5,56,4,23,-59,-18,22,10,13,-2,26,-32,53,91,-7,-21,47,39,-2,114,16,1,-16,19,-22,-5,-56, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0068122041411697865, 0.0043093729764223099, 0.014447134919464588, 0.001350409584119916, 0.0065709920600056648, 0.0081356717273592949, 0.017076142132282257, 0.0035266773775219917, 0.0057701007463037968, 0.016580838710069656, 0.0072999438270926476, 0.015279242768883705, 0.0044185877777636051, 0.013116694986820221, 0.0065542473457753658, 0.0041157449595630169, 0.004190902691334486, 0.011489125899970531, 0.0026388652622699738, 0.0083670103922486305, 0.0020898967050015926, 0.0075400699861347675, 0.0056913583539426327, 0.0141452606767416, 0.011068473570048809, 0.010702315717935562, 0.0052711949683725834, 0.0093464301899075508, 0.0036124321632087231, 0.0042124991305172443, 0.0048690610565245152, 0.006669679656624794, 0.0056238477118313313, 0.0062577114440500736, 0.0083879940211772919, 0.0055771716870367527, 0.018553894013166428, 0.004626469686627388, 0.0019104544771835208, 0.0076288278214633465, 0.0079353274777531624, 0.013611202128231525, 0.016177842393517494, 0.0067266053520143032, 0.0075385705567896366, 0.0028461324982345104, 0.0088249659165740013, 0.0060502584092319012, 0.003158848499879241, 0.0065116612240672112, 0.0083481855690479279, 0.0050188126042485237, 0.0093525908887386322, 0.012199131771922112, 0.015615434385836124, 0.016894742846488953, 0.010012798942625523, 0.0099260136485099792, 0.0041343816556036472, 0.0033206681255251169, 0.014360093511641026, 0.0065453699789941311, 0.01280713826417923, 0.0055617098696529865, 0.0092704836279153824, 0.0075132530182600021, 0.00271226791664958, 0.0025158736389130354, 0.018084617331624031, 0.011614446528255939, 0.0071713263168931007, 0.0031713773496448994, 0.0081352125853300095, 0.0066988505423069, 0.0071301260031759739, 0.010520146228373051, 0.021751631051301956, 0.002323252847418189, 0.01142792496830225, 0.0079608149826526642, 0.007308808621019125, 0.012384438887238503, 0.0063811163417994976, 0.0064772330224514008, 0.0055669117718935013, 0.0048509631305932999, 0.006001585628837347, 0.0070238676853477955, 0.010488951578736305, 0.0051112393848598003, 0.0076220962218940258, 0.0051801674999296665, 0.0062588555738329887, 0.017802203074097633, 0.071063563227653503, 0.0039516724646091461, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 23876, 1172, 8023, -561, 5817, 6348, 16544, 8409, -1665, 19503, 7144, 2594, 6698, 27384, -265, -1094, 13013, 12277, 2375, -336, -762, 23615, 3699, 2718, 14877, 5544, 4523, 6440, 287, -101, 13567, 12076, 15923, 3576, 7348, -540, 19945, 9953, 971, 6772, 1081, 13990, 17817, 6179, 7118, 12235, 21191, 11523, 5242, 2833, 249, -1606, 16112, 8904, 7770, 14658, -225, 9585, 4284, 4955, 25299, 7638, 3366, 7440, 8794, 4782, 7745, -862, 24088, 11424, 9815, -1442, -2089, 3410, 2319, 3846, 23530, 17120, 17916, -2300, 5179, -6513, -2826, 667, 9986, 6050, 8465, 5402, 13757, 3686, 9554, 5607, 14033, 23548, -11190, 16868, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00011010729940608144, 0.00023468783183488995, 0.00015335710486397147, 0.00096082186792045832, 0.00028923872741870582, 0.00013665106962434947, 0.00018087087664753199, 0.00042338215280324221, 0.00030004855943843722, 9.1575784608721733e-05, 0.00018928959616459906, 0.0003390423662494868, 0.000414420006563887, 0.00017893372569233179, 0.0003000789147336036, 0.00049546384252607822, 0.00016686583694536239, 0.00019143923418596387, 0.00020798300101887435, 0.00060633034445345402, 0.00028623492107726634, 0.00010336966079194099, 0.00033740661456249654, 0.00028309671324677765, 0.00011883580009452999, 0.0003586385864764452, 0.00028766895411536098, 0.00013970959116704762, 0.00048545596655458212, 0.00032512063626199961, 0.00011370964057277888, 0.00015975348651409149, 0.00012203032383695245, 0.0003112679987680167, 0.00022308714687824249, 0.00050020695198327303, 0.00011588820780161768, 0.00026670587249100208, 0.00046251254389062524, 0.00013591533934231848, 0.00038026290712878108, 0.00013432992273010314, 0.0001218945617438294, 0.00012906623305752873, 0.00014710488903801888, 0.00026292057009413838, 0.00013529659190680832, 0.00013247554306872189, 0.00030176198924891651, 0.00024028675397858024, 0.00044908071868121624, 0.00042525786557234824, 0.00016136528574861586, 0.00017299198952969164, 0.00030056183459237218, 0.00012624368537217379, 0.00035676290281116962, 0.00018452659423928708, 0.00019201259419787675, 0.00035614368971437216, 6.8906534579582512e-05, 0.00018498065765015781, 0.00028274138458073139, 0.0003699272929225117, 0.00012420486018527299, 0.00023370316193904728, 0.00025850831298157573, 0.00034328791662119329, 0.0001149847375927493, 0.00010147746070288122, 0.00019798536959569901, 0.00041429803241044283, 0.00023601588327437639, 0.00038267255877144635, 0.00017756085435394198, 0.00032513687619939446, 0.00010183324775425717, 0.00025704750441946089, 9.7805714176502079e-05, 0.00048493515350855887, 0.00021619381732307374, 0.00032128317980095744, 0.00016920967027544975, 0.00046539952745661139, 0.00016315552056767046, 0.00025720548001118004, 0.00019185252313036472, 0.00024659265181981027, 0.00012156205048086122, 0.00040694564813748002, 0.00014654410188086331, 0.00029492410249076784, 0.00014958051906432956, 0.00011891470785485581, 0.00026063885889016092, 0.00019464877550490201, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ -9,-107,94,126,74,38,44,-43,125,4,-122,-123,99,32,27,-127, 
  /* [1][0][][] */ 20,86,-97,-60,127,-46,55,-3,16,11,7,120,35,-91,92,-41, 
  /* [2][0][][] */ 13,-9,-45,36,-105,111,-34,17,-63,-41,-20,122,39,-127,71,-112, 
  /* [3][0][][] */ 127,114,-9,20,-81,0,-35,10,4,-1,79,-78,-46,80,-69,-41, 
  /* [4][0][][] */ -10,-37,21,48,-46,36,-25,85,-52,-26,-30,5,51,-127,59,13, 
  /* [5][0][][] */ 120,-26,-10,-6,-19,-127,-33,0,-37,24,-87,40,63,-5,-5,26, 
  /* [6][0][][] */ -127,-28,-69,107,-47,6,-18,34,-111,-70,-6,-30,-22,42,37,47, 
  /* [7][0][][] */ 3,36,-62,61,14,-127,-24,73,-8,-78,24,11,-26,-20,-11,80, 
  /* [8][0][][] */ 59,-73,37,-9,0,21,-81,-50,-19,-9,-94,6,-127,15,54,22, 
  /* [9][0][][] */ 12,-114,122,104,-14,-38,55,-97,127,-60,74,-42,22,82,-30,83, 
  /* [10][0][][] */ -70,-57,60,-12,127,57,51,93,84,-2,-20,17,63,-101,-114,110, 
  /* [11][0][][] */ 56,26,-127,-27,49,26,-23,52,-29,-10,-4,25,0,-26,-44,9, 
  /* [12][0][][] */ 47,-47,-95,0,-34,-9,-66,-40,43,-24,-127,-3,-1,11,4,-1, 
  /* [13][0][][] */ 6,-55,54,-92,127,74,-22,-91,45,37,104,62,54,-43,-38,10, 
  /* [14][0][][] */ -53,15,-77,-27,37,-127,71,-27,26,36,17,-80,57,101,25,23, 
  /* [15][0][][] */ 14,26,18,29,24,-49,-36,8,4,-56,-49,3,-127,-38,-8,42, 
  /* [16][0][][] */ -70,127,78,87,-34,92,79,83,-19,50,35,22,85,-31,17,-110, 
  /* [17][0][][] */ -7,-42,-69,-43,-30,3,52,57,3,127,-21,-26,-21,97,55,-9, 
  /* [18][0][][] */ 11,127,-57,-18,23,19,28,-74,0,79,-67,87,24,-49,21,-93, 
  /* [19][0][][] */ 5,-28,42,16,-14,48,7,-1,-2,-1,-28,-5,-127,5,9,36, 
  /* [20][0][][] */ 84,-47,-37,-114,-32,55,62,-97,-58,40,-127,-67,-7,-40,55,-13, 
  /* [21][0][][] */ 71,8,127,70,-30,59,5,39,40,-20,-25,11,35,109,5,-26, 
  /* [22][0][][] */ 59,3,42,-48,36,30,24,127,-21,-24,-4,-5,32,27,6,-5, 
  /* [23][0][][] */ -18,-7,-29,6,7,-127,8,6,-6,-9,-6,4,-48,15,26,9, 
  /* [24][0][][] */ 16,-127,24,-86,12,16,-96,-3,10,-5,63,97,-28,121,124,67, 
  /* [25][0][][] */ -127,-39,-70,11,96,40,-18,-23,-31,31,-104,39,28,0,20,66, 
  /* [26][0][][] */ 27,-3,-24,-9,-12,2,-27,55,-75,-23,0,35,29,-127,21,25, 
  /* [27][0][][] */ -127,36,-62,13,48,1,9,15,3,-36,122,16,-47,10,-42,2, 
  /* [28][0][][] */ -17,-25,15,40,-4,-4,6,83,49,13,-23,-17,-127,7,-10,46, 
  /* [29][0][][] */ -22,28,68,-35,0,-17,18,-5,-127,37,-43,7,-21,13,-86,-5, 
  /* [30][0][][] */ 25,16,-127,-60,48,-93,26,20,-39,-8,-44,-60,-66,-99,28,0, 
  /* [31][0][][] */ 127,-18,-91,-4,21,-9,-11,42,-27,39,-71,-2,42,-28,-51,54, 
  /* [32][0][][] */ -80,59,-22,14,-20,127,-3,39,46,-21,77,-4,-45,3,-3,19, 
  /* [33][0][][] */ 58,-35,127,-70,-79,56,22,-48,-76,13,39,42,36,73,22,-4, 
  /* [34][0][][] */ 26,-21,-22,-127,-12,-32,-8,-31,11,19,3,-58,3,9,22,97, 
  /* [35][0][][] */ -8,-47,-2,61,54,-1,9,9,-113,35,-8,1,-18,127,-15,-46, 
  /* [36][0][][] */ -64,-9,26,-38,-10,25,15,71,13,40,127,-47,-19,40,31,16, 
  /* [37][0][][] */ -43,9,127,-25,-101,-50,20,-46,21,38,-1,24,-30,-34,59,9, 
  /* [38][0][][] */ -23,21,-6,1,52,-78,-75,9,3,-39,77,-33,127,48,-44,40, 
  /* [39][0][][] */ -57,-68,-35,-90,-78,-50,3,105,-31,-62,22,-71,-25,64,69,127, 
  /* [40][0][][] */ 59,-55,-60,12,16,72,-26,-9,65,-55,-22,-1,127,20,9,-47, 
  /* [41][0][][] */ 4,-20,-23,-127,26,-12,-37,-72,21,0,23,-48,-16,-34,1,50, 
  /* [42][0][][] */ 3,37,-31,123,-127,-15,-96,-5,-127,-94,84,-97,-27,100,12,24, 
  /* [43][0][][] */ 24,127,-37,97,16,-34,20,-109,-51,93,-13,22,9,-45,68,39, 
  /* [44][0][][] */ -38,-12,-101,63,127,114,-65,127,-4,-29,98,-50,-10,-62,-127,-59, 
  /* [45][0][][] */ 19,32,12,-127,27,-43,52,-12,58,35,-50,-28,77,-77,39,3, 
  /* [46][0][][] */ 40,60,127,-43,-6,8,-57,83,-21,-91,-86,34,63,111,78,-20, 
  /* [47][0][][] */ 31,-28,45,-86,-97,1,-47,41,-50,-28,28,41,66,-127,52,63, 
  /* [48][0][][] */ -15,0,44,-127,11,-18,-20,-9,22,-38,0,4,-8,40,0,47, 
  /* [49][0][][] */ 79,-32,38,127,95,22,9,23,-110,6,35,85,-15,3,120,-42, 
  /* [50][0][][] */ 1,-20,115,-6,8,127,1,-68,39,-2,82,-6,91,12,21,-82, 
  /* [51][0][][] */ 37,31,6,42,16,9,-75,40,75,5,-24,127,-1,73,0,-37, 
  /* [52][0][][] */ -17,63,91,1,-10,6,-14,-76,-19,16,28,57,0,104,-127,-2, 
  /* [53][0][][] */ -22,-36,-44,-127,-7,-7,-21,-41,-30,-35,30,-23,11,2,44,58, 
  /* [54][0][][] */ -8,1,-36,-49,5,-1,-29,-5,13,-30,-15,-8,32,127,33,20, 
  /* [55][0][][] */ 2,-20,-13,7,-21,-35,-24,-127,-5,-17,-38,-15,-36,-48,1,-24, 
  /* [56][0][][] */ 34,74,29,80,14,-2,-11,127,-3,-24,17,-24,51,-17,-34,-8, 
  /* [57][0][][] */ 103,-39,45,-13,-127,-52,-14,-31,19,10,-15,-28,44,-5,72,-83, 
  /* [58][0][][] */ 121,88,55,127,-101,40,-51,84,-53,-1,115,24,-124,-102,-17,-117, 
  /* [59][0][][] */ 127,-27,-34,13,-15,-33,-8,35,-65,12,-125,0,5,-7,17,28, 
  /* [60][0][][] */ -127,127,69,90,8,-24,65,-9,55,53,93,38,7,-17,71,-30, 
  /* [61][0][][] */ -58,100,25,69,33,23,-33,-80,127,-35,105,21,70,-57,-104,-69, 
  /* [62][0][][] */ 5,45,-127,-21,58,103,-56,64,28,-77,93,-1,-52,12,-77,39, 
  /* [63][0][][] */ -5,2,127,-2,-57,-34,26,-15,31,23,9,-10,-22,-15,45,-16, 
  /* [64][0][][] */ 34,94,-54,30,36,-1,80,-127,-45,74,-53,15,8,-124,4,-44, 
  /* [65][0][][] */ -9,4,46,43,99,-30,6,-83,-28,-127,-32,-49,-17,-18,80,-1, 
  /* [66][0][][] */ -127,3,-27,24,-59,21,38,-27,-105,-45,-59,77,30,13,58,52, 
  /* [67][0][][] */ -11,-78,4,127,-25,-31,-56,71,38,-1,12,-38,27,-2,-94,-3, 
  /* [68][0][][] */ -37,14,4,127,-44,26,-23,-33,-47,-6,-11,-12,-54,-84,1,-45, 
  /* [69][0][][] */ 77,126,64,120,-5,107,55,-127,11,102,29,36,-39,-126,64,-3, 
  /* [70][0][][] */ -23,14,99,-127,72,-34,67,-16,44,70,69,-99,-9,87,43,75, 
  /* [71][0][][] */ -20,33,-7,47,9,-127,1,56,7,-74,39,-13,23,-42,-21,29, 
  /* [72][0][][] */ -127,-71,0,60,35,62,-17,29,-30,-21,-83,34,43,18,11,79, 
  /* [73][0][][] */ -38,-33,-35,63,-73,18,-46,-23,2,-14,-8,13,9,127,-8,-57, 
  /* [74][0][][] */ 17,-40,-59,-33,-18,-17,127,-13,-49,10,-29,3,-124,-80,6,25, 
  /* [75][0][][] */ -33,10,-37,127,-52,15,0,-55,-97,39,-3,-10,10,-49,-3,3, 
  /* [76][0][][] */ -4,-26,-21,58,7,-4,-6,-127,19,-77,28,-6,-9,-15,31,-58, 
  /* [77][0][][] */ 127,-13,10,21,-6,15,-15,-12,112,-22,1,-8,7,21,-88,-4, 
  /* [78][0][][] */ -31,-36,54,13,37,40,-26,-5,54,-20,-47,-38,36,127,63,-1, 
  /* [79][0][][] */ -10,20,77,34,39,91,-68,-73,16,-53,89,-26,127,-20,-52,-47, 
  /* [80][0][][] */ -56,-83,-67,101,21,27,37,32,-71,-46,-67,2,45,-127,9,5, 
  /* [81][0][][] */ 42,29,-44,44,102,127,-33,-13,4,-82,11,-82,-21,-14,-60,-12, 
  /* [82][0][][] */ 114,77,-30,32,-73,-3,-78,-38,-84,1,127,-55,-73,90,-20,-45, 
  /* [83][0][][] */ 127,51,0,-15,8,-33,9,26,25,8,91,-23,-60,-15,-20,-56, 
  /* [84][0][][] */ 107,-113,-13,-38,109,0,-36,-105,-18,-127,28,44,0,-22,-49,-63, 
  /* [85][0][][] */ -36,-55,-48,-52,-23,5,74,127,-45,66,-2,-60,42,88,103,-58, 
  /* [86][0][][] */ 56,-57,9,7,-30,-43,-4,-50,31,-1,-127,-11,-8,34,6,5, 
  /* [87][0][][] */ -10,71,17,-46,27,25,-33,70,-10,2,21,-16,13,-127,4,-2, 
  /* [88][0][][] */ 16,-108,-127,2,65,-5,-16,-16,-38,-59,47,30,3,122,65,-43, 
  /* [89][0][][] */ 45,-20,60,-127,58,9,-56,103,31,-63,-5,-14,7,0,15,-1, 
  /* [90][0][][] */ -18,10,-38,91,33,68,71,-57,36,127,-7,33,-6,-24,28,-42, 
  /* [91][0][][] */ 39,-3,-74,39,11,-127,18,22,-7,38,-41,24,53,1,41,38, 
  /* [92][0][][] */ 29,76,127,17,51,27,-26,29,-16,-32,-75,-19,-4,84,-35,-32, 
  /* [93][0][][] */ 90,-71,-18,-51,7,-46,-26,27,-58,38,-77,13,-16,10,53,127, 
  /* [94][0][][] */ -10,-4,37,76,63,-5,26,70,6,26,22,64,-2,127,-45,-70, 
  /* [95][0][][] */ -110,36,4,64,10,50,4,9,-16,13,127,6,-6,21,19,-15, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.00041703705210238695, 0.00088889221660792828, 0.00058084790362045169, 0.0036391620524227619, 0.0010955064790323377, 0.00051757291657850146, 0.00068505771923810244, 0.0016035815933719277, 0.0011364492820575833, 0.00034684798447415233, 0.00071694405050948262, 0.001284140395000577, 0.0015696369810029864, 0.00067772064357995987, 0.0011365643003955483, 0.0018765947315841913, 0.00063201290322467685, 0.00072508590528741479, 0.00078774627763777971, 0.0022965073585510254, 0.001084129442460835, 0.00039151788223534822, 0.0012779448879882693, 0.0010722433216869831, 0.0004500966751947999, 0.0013583620311692357, 0.0010895609157159925, 0.00052915723063051701, 0.0018386893207207322, 0.0012314111227169633, 0.00043068110244348645, 0.00060507451416924596, 0.00046219609794206917, 0.0011789435520768166, 0.00084495398914441466, 0.0018945594783872366, 0.00043893253314308822, 0.0010101621737703681, 0.0017517899395897985, 0.00051478634122759104, 0.0014402652159333229, 0.000508781464304775, 0.0004616818914655596, 0.00048884499119594693, 0.00055716733913868666, 0.00099582516122609377, 0.00051244278438389301, 0.00050175789510831237, 0.0011429389705881476, 0.00091009843163192272, 0.0017009162111207843, 0.0016106859548017383, 0.00061117927543818951, 0.00065521604847162962, 0.0011383934179320931, 0.00047815445577725768, 0.001351257786154747, 0.00069890392478555441, 0.00072725757490843534, 0.0013489124830812216, 0.00026098702801391482, 0.00070062372833490372, 0.0010708974441513419, 0.001401118584908545, 0.00047043227823451161, 0.00088516273535788059, 0.00097911350894719362, 0.0013002206105738878, 0.00043551059206947684, 0.00038435109308920801, 0.0007498797494918108, 0.0015691750450059772, 0.00089392228983342648, 0.0014493919443339109, 0.000672520836815238, 0.0012314725900068879, 0.00038569865864701569, 0.00097358063794672489, 0.00037044414784759283, 0.0018367167795076966, 0.00081884517567232251, 0.0012168765533715487, 0.0006408903282135725, 0.0017627245979383588, 0.00061795988585799932, 0.00097417895449325442, 0.00072665128391236067, 0.0009339823154732585, 0.00046042251051403582, 0.0015413275687023997, 0.00055504328338429332, 0.0011170401703566313, 0.00056654389481991529, 0.0004503955424297601, 0.00098718306981027126, 0.00073724222602322698, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -42322, 839, 1570, -8916, -650, -1881, -6776, -41695, -4478, 18326, 27737, -10086, 1450, -23300, 32483, -37910, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00052420963766053319, 0.00077629124280065298, 0.00099341489840298891, 0.0009315394563600421, 0.00092118425527587533, 0.0010294744279235601, 0.00088799966033548117, 0.00056970579316839576, 0.00055296975187957287, 0.00054088688921183348, 0.00073823507409542799, 0.00058262894162908196, 0.00094836059724912047, 0.0011942381970584393, 0.0004348888760432601, 0.00054915901273488998, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -11,4,-6,8,4,3,-20,124,-40,25,31,-19,15,-15,-18,23,19,-17,0,1,73,-4,24,127,-3,99,7,0,33,-9,31,-22,-57,59,22,-73,11,45,23,-7,-111,-34,19,42,50,18,-125,-35, 
  /* [1][0][][] */ -47,1,29,13,-38,15,3,52,-49,-41,16,-40,-26,-3,-5,-12,-34,107,-23,7,-6,13,-17,-24,19,-33,27,16,-27,-79,-23,18,-11,-7,39,0,4,-38,3,25,-23,-25,127,13,17,-7,11,-7, 
  /* [2][0][][] */ -15,-2,-12,-31,-2,-68,7,-21,7,6,21,22,19,21,-7,11,-5,-15,-21,-13,-6,-4,0,-127,-14,85,-7,6,-4,-26,-4,-2,-28,58,5,3,18,4,26,-6,-31,2,-14,-14,2,-8,14,16, 
  /* [3][0][][] */ -9,29,1,-36,-2,-7,2,1,-30,-9,8,48,-127,4,-2,-8,-5,5,-13,-2,-27,3,8,22,-6,-3,-4,22,-6,19,16,15,1,3,20,18,-15,25,44,15,9,6,23,-35,1,-3,5,9, 
  /* [4][0][][] */ 30,-30,-1,10,21,34,34,-15,-36,2,-10,-29,-2,2,-11,17,8,-19,-74,16,-9,13,4,69,-1,-28,4,44,10,-73,12,-5,23,-34,31,-127,15,30,1,20,-10,22,-1,-21,-7,-18,4,17, 
  /* [5][0][][] */ 23,-3,-12,53,-3,-1,10,21,2,1,39,6,4,61,-14,16,-21,16,24,4,13,8,-1,-31,-3,-55,15,-20,-6,-13,-5,-5,64,-127,-2,32,-16,-9,13,12,-99,55,11,-4,-4,-6,-106,1, 
  /* [6][0][][] */ 25,-8,0,2,-12,-10,2,-11,-9,-5,-1,2,-13,5,7,-1,0,-13,127,12,8,12,12,-37,0,10,26,-14,-5,-3,0,10,-9,-11,32,-41,-4,-47,66,13,-5,-15,-11,9,-10,6,7,-10, 
  /* [7][0][][] */ -46,-11,-5,24,-15,69,-16,58,-16,49,-8,127,78,-8,-9,10,-11,-37,-12,-11,-33,-3,-20,65,-16,-22,-49,-21,-3,-7,-16,9,13,-2,-24,-1,8,-50,93,-23,17,19,-75,-61,11,1,-5,-7, 
  /* [8][0][][] */ -51,-40,-4,9,-5,13,9,36,6,-71,5,42,42,-6,16,16,-20,63,-23,11,-45,25,-4,-10,2,-11,9,60,-13,124,-3,21,20,-1,-17,-127,-119,66,43,31,30,2,109,-28,4,32,26,24, 
  /* [9][0][][] */ -29,6,13,28,14,-21,-3,-2,63,-43,7,75,-61,26,21,-4,6,41,-47,-28,57,5,7,-30,-7,19,59,-24,14,28,18,-8,-4,13,63,-100,0,-127,-102,38,-45,38,64,-5,3,-2,-14,-31, 
  /* [10][0][][] */ -18,-18,-43,-127,55,80,9,-8,1,37,17,9,47,-49,-53,22,29,-29,54,-17,33,-24,40,55,-52,-101,14,-25,41,19,53,-50,-18,-73,19,12,19,-46,9,-49,-24,-55,-11,8,20,2,14,-32, 
  /* [11][0][][] */ -6,47,1,56,32,-70,-62,-4,10,65,-18,9,-9,78,-7,-66,20,40,12,-20,-50,-104,21,6,-7,-43,21,-12,57,-49,5,-87,33,-13,-36,-85,86,10,12,-127,-1,62,91,-82,-28,-72,32,25, 
  /* [12][0][][] */ 127,13,-17,6,-11,18,-3,107,13,-20,-70,-25,-5,-3,-5,-12,-1,15,-11,-4,12,6,2,19,-6,17,-11,7,5,4,0,-4,-13,-62,-11,11,-14,-18,-31,3,-22,-89,14,-125,-56,-19,77,8, 
  /* [13][0][][] */ 11,0,-1,6,6,-15,-4,1,-4,11,-5,23,-4,0,4,0,11,2,10,11,11,-13,10,0,1,2,12,127,12,-2,0,0,2,0,-38,21,9,-3,6,-17,-15,-1,1,3,-5,0,-11,-11, 
  /* [14][0][][] */ 67,-33,41,-80,74,25,36,-122,-50,-30,-4,124,-78,-29,57,29,65,21,-55,61,28,19,79,-19,28,56,-29,-118,35,-35,44,61,-1,58,-127,-33,-8,59,93,5,-57,22,51,6,-8,-1,29,-54, 
  /* [15][0][][] */ -12,-66,-54,-35,59,35,61,-53,-15,30,-38,-46,83,3,-94,43,79,49,94,-83,-109,-25,52,-30,-82,33,6,74,56,37,46,-33,-8,78,98,114,-34,-127,-7,-61,107,57,127,-41,-8,-19,-6,73, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.022278908640146255, 0.032992377877235413, 0.042220130562782288, 0.039590425789356232, 0.039150331169366837, 0.043752662837505341, 0.037739984691143036, 0.024212496355175972, 0.023501213639974594, 0.022987691685557365, 0.031374990940093994, 0.024761728942394257, 0.040305323898792267, 0.050755120813846588, 0.01848277635872364, 0.023339258506894112, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 3612, 42875, -1080, 41276, 3475, 127308, -2531, 54950, 4775, 34492, 27286, 1394, 5389, 34934, -1213, -494, -369, -1265, -546, -2364, -152, -3569, 1319, -18929, -4618, 48692, 129580, 108666, 2539, 6923, -2721, 695, 25620, 1085, 64341, 840, 52947, 1799, 51094, 626, 1411, 68701, -1824, 3790, 50613, -596, 2852, 55637, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 6.7652232246473432e-05, 3.2389918487751856e-05, 0.00017413597379345447, 5.5267209972953424e-05, 0.00013307669723872095, 6.9365196395665407e-05, 0.00015471952792722732, 0.00010569040750851855, 6.2895014707464725e-05, 4.1521197999827564e-05, 4.0350962080992758e-05, 8.8780689111445099e-05, 3.7979196349624544e-05, 3.2244955946225673e-05, 0.00016249751206487417, 0.00023440910445060581, 0.00017996817769017071, 5.8274821640225127e-05, 0.00013301437138579786, 0.00013644840510096401, 0.00011216558050364256, 0.00022902191267348826, 0.00011826428089989349, 0.00010631501208990812, 0.00010474452574271709, 9.0991452452726662e-05, 1.9728340703295544e-05, 6.2493229052051902e-05, 0.00011922927660634741, 8.3491358964238316e-05, 0.00010872562415897846, 0.00015709907165728509, 3.7154324672883376e-05, 9.7280339105054736e-05, 2.4359416784136556e-05, 4.8773479647934437e-05, 0.00010907036630669609, 8.848298602970317e-05, 0.00011501785775180906, 0.00011546413588803262, 9.7196112619712949e-05, 8.3583472587633878e-05, 8.6558422481175512e-05, 7.7713833888992667e-05, 2.8047325031366199e-05, 0.00015836408420000225, 8.877302025211975e-05, 2.6369949409854598e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 66,-102,96,81,54,-37,110,-73,62,-96,-78,51,56,-45,-71,-91,101,81,50,77,64,-70,-85,55,-35,-42,-69,-63,-67,62,-66,-118,-17,41,72,66,-68,54,-54,-22,54,-74,56,62,-100,10,76,-37, 81,-100,127,90,-76,-72,-58,-90,98,-110,-66,76,81,-111,-92,87,-40,104,85,127,88,-109,51,73,-50,-82,-70,-80,56,79,-31,-127,-85,81,83,81,-82,83,-86,-14,81,-91,82,90,-73,-127,94,-102, 37,-53,67,41,23,-44,-51,-43,46,-35,2,38,27,-81,-56,-2,-60,40,37,68,39,-50,31,29,-28,-51,-42,-23,31,34,92,-88,-88,48,36,36,-31,40,-40,-9,44,-39,40,45,-6,-8,40,-72, 
  /* [0][1][][] */ 93,-117,-45,96,55,-83,127,-93,89,-119,-73,87,87,-110,-13,-127,127,111,77,-34,81,106,-127,74,75,-80,-100,-99,-127,87,-69,-7,-89,73,109,95,-90,82,-84,89,90,-102,89,94,-90,105,91,-91, 127,-127,-69,127,-127,-127,-92,-127,127,-127,-127,127,127,-127,-23,89,-65,127,127,-47,127,127,67,127,127,-127,-127,-127,53,127,-32,20,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-12,127,-127, 66,-87,-34,73,40,-61,-51,-69,58,-46,-56,58,47,-48,-17,9,-67,52,61,-28,65,66,50,69,67,-66,-63,-46,38,57,127,16,-65,71,49,53,-51,62,-58,57,66,-58,57,63,-63,-69,61,-54, 
  /* [0][2][][] */ 48,-55,-47,52,28,-58,67,-48,44,-77,-10,44,60,-77,82,-77,74,55,39,-27,29,-15,-77,32,-28,-51,-55,-52,-73,32,-41,93,-82,44,48,49,-28,40,-44,-82,51,-54,43,51,-23,19,40,-77, 75,-81,-50,88,-54,-67,-75,-75,53,-86,-66,63,79,-51,127,32,-47,62,66,-42,56,-22,42,67,-51,-72,-85,-64,36,66,-25,122,-66,69,57,59,-53,62,-65,-102,75,-68,63,65,-87,54,64,-56, 44,-46,-29,58,34,-21,-19,-42,19,-37,-52,31,31,1,68,24,-40,24,33,-31,36,-4,42,45,-25,-36,-53,-26,35,37,62,69,-5,38,11,30,-29,33,-29,-52,33,-35,27,33,-64,13,33,-4, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0028752197977155447, 0.0013765714829787612, 0.0074007785879075527, 0.0023488563019782305, 0.0056557594798505306, 0.0029480208177119493, 0.0065755797550082207, 0.0044918423518538475, 0.0026730380486696959, 0.0017646509222686291, 0.0017149158520624042, 0.0037731791380792856, 0.0016141157830134034, 0.0013704105513170362, 0.0069061438553035259, 0.0099623864516615868, 0.0076486472971737385, 0.0024766798596829176, 0.0056531107984483242, 0.0057990569621324539, 0.004767036996781826, 0.0097334310412406921, 0.0050262319855391979, 0.0045183878391981125, 0.0044516422785818577, 0.0038671365473419428, 0.00083845446351915598, 0.0026559622492641211, 0.0050672441720962524, 0.0035483827814459801, 0.0046208389103412628, 0.0066767106764018536, 0.0015790588222444057, 0.0041344142518937588, 0.0010352751705795527, 0.0020728728268295527, 0.0046354904770851135, 0.0037605268880724907, 0.0048882588744163513, 0.0049072257243096828, 0.0041308347135782242, 0.0035522975958883762, 0.003678733017295599, 0.0033028379548341036, 0.0011920112883672118, 0.0067304736003279686, 0.0037728531751781702, 0.0011207228526473045, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 679, 759, 2411, 503, 11575, 19193, 2281, 100, -713, -567, 1140, 1226, 2918, 1204, 25640, 2861, 2085, -1104, -41, 3283, -2244, 13043, 12002, 9964, 4690, 212, 5543, 4169, 6397, -645, 12668, 6792, 648, 55, 5106, 5194, -2237, 439, -581, 6781, 489, -597, -994, -61, 1301, 3998, 914, 1012, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00038570811739191413, 0.00083582190563902259, 0.00024583333288319409, 0.00037336372770369053, 0.00019066579989157617, 0.00021104476763866842, 0.00047222952707670629, 0.00030078130657784641, 0.00037958612665534019, 0.00071007647784426808, 0.00085735390894114971, 0.0002782602678053081, 0.00040606618858873844, 0.00066742877243086696, 0.00014030806778464466, 0.00043180733337067068, 0.00025047580129466951, 0.00030927712214179337, 0.00024826862500049174, 0.00027463902370072901, 0.00030101186712272465, 0.00020239295554347336, 0.00031012590625323355, 0.00015727843856438994, 0.00034421624150127172, 0.00028905988438054919, 0.0012605555821210146, 0.00043821925646625459, 0.00026168351178057492, 0.00042285185190849006, 0.0002022898115683347, 0.00018373382044956088, 0.00056270207278430462, 0.00024783230037428439, 0.00070074200630187988, 0.00036287715192884207, 0.00062866735970601439, 0.00031348067568615079, 0.00025953337899409235, 0.00028794753598049283, 0.00019383362086955458, 0.00024184989160858095, 0.00030209950637072325, 0.00030272110598161817, 0.0014872421743348241, 0.00034508062526583672, 0.00029676681151613593, 0.0011344024678692222, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,-3,4,52,-30,38,15,-19, 
  /* [1][0][][] */ 10,48,9,6,22,-67,88,127, 
  /* [2][0][][] */ -19,-17,22,9,-127,-13,13,-11, 
  /* [3][0][][] */ 67,8,24,-127,-103,18,22,-19, 
  /* [4][0][][] */ -121,82,9,10,91,-37,127,25, 
  /* [5][0][][] */ -98,-27,28,-11,-127,-1,6,97, 
  /* [6][0][][] */ 4,-127,35,-15,21,-32,11,39, 
  /* [7][0][][] */ -46,1,-6,87,127,-26,-35,-4, 
  /* [8][0][][] */ 81,18,9,-127,1,-24,-61,-31, 
  /* [9][0][][] */ -22,-127,-15,15,38,95,-41,85, 
  /* [10][0][][] */ -97,-2,10,21,-127,78,85,-7, 
  /* [11][0][][] */ 119,22,55,19,-65,-47,-38,-127, 
  /* [12][0][][] */ -8,13,30,-14,8,-59,127,72, 
  /* [13][0][][] */ 64,-12,-18,14,93,127,123,-34, 
  /* [14][0][][] */ 127,82,-11,33,-67,-3,34,-55, 
  /* [15][0][][] */ -4,-127,61,-23,9,2,-7,28, 
  /* [16][0][][] */ -63,-2,-12,-5,-127,-2,13,6, 
  /* [17][0][][] */ 12,85,-104,9,15,-105,127,-85, 
  /* [18][0][][] */ 127,-34,-23,23,-57,14,-6,115, 
  /* [19][0][][] */ 127,-49,-7,10,40,-61,-1,25, 
  /* [20][0][][] */ 127,18,0,109,6,7,-3,-61, 
  /* [21][0][][] */ -16,19,-51,15,1,112,-127,-83, 
  /* [22][0][][] */ -127,42,24,-7,-55,15,-49,-37, 
  /* [23][0][][] */ -39,-55,11,19,-127,72,76,-18, 
  /* [24][0][][] */ 127,17,10,-4,-42,-25,17,-10, 
  /* [25][0][][] */ 14,-32,-3,-27,127,43,45,-23, 
  /* [26][0][][] */ -3,-105,6,-45,0,-123,127,-71, 
  /* [27][0][][] */ -21,-127,21,-17,0,-62,33,-7, 
  /* [28][0][][] */ -75,36,21,25,-50,-25,127,79, 
  /* [29][0][][] */ -8,48,18,12,-2,49,-88,-127, 
  /* [30][0][][] */ 127,-95,-75,87,-112,-32,-95,19, 
  /* [31][0][][] */ 1,-60,30,-8,18,-90,127,92, 
  /* [32][0][][] */ -108,29,16,22,-127,-117,-119,53, 
  /* [33][0][][] */ -33,-4,9,29,-127,-61,-57,33, 
  /* [34][0][][] */ 13,-127,55,-4,-14,68,-73,92, 
  /* [35][0][][] */ -25,-48,-127,-6,-3,-78,44,-49, 
  /* [36][0][][] */ -2,127,84,-2,-20,22,-22,-46, 
  /* [37][0][][] */ -127,35,52,-11,62,-17,-16,-105, 
  /* [38][0][][] */ -127,-17,-57,-10,38,20,42,93, 
  /* [39][0][][] */ 27,-26,92,15,22,-117,127,102, 
  /* [40][0][][] */ -25,-19,-2,-42,-119,119,127,-31, 
  /* [41][0][][] */ -127,36,6,-53,-85,-91,-70,45, 
  /* [42][0][][] */ -48,-120,-113,8,-12,76,-127,-82, 
  /* [43][0][][] */ -61,-2,-28,-127,89,49,53,13, 
  /* [44][0][][] */ 125,-5,25,-127,37,-55,-13,43, 
  /* [45][0][][] */ 5,-127,14,-10,5,-83,109,6, 
  /* [46][0][][] */ 102,-3,-11,-22,127,-32,-23,7, 
  /* [47][0][][] */ 80,9,14,127,1,22,0,-61, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00072764459764584899, 0.0015767915174365044, 0.00046376854879781604, 0.00070435670204460621, 0.00035969409509561956, 0.00039813935291022062, 0.00089086859952658415, 0.00056742876768112183, 0.00071609532460570335, 0.0013395707355812192, 0.0016174119664356112, 0.00052494247211143374, 0.00076605041977018118, 0.0012591151753440499, 0.00026469342992641032, 0.00081461149966344237, 0.00047252661897800863, 0.00058345624711364508, 0.00046836276305839419, 0.00051811092998832464, 0.00056786375353112817, 0.00038181757554411888, 0.00058505753986537457, 0.0002967083128169179, 0.00064936949638649821, 0.00054531614296138287, 0.0023780583869665861, 0.00082670769188553095, 0.00049367017345502973, 0.00079771684249863029, 0.00038162298733368516, 0.00034661681274883449, 0.0010615464998409152, 0.00046753961942158639, 0.0013219610555097461, 0.00068457360612228513, 0.0011859911028295755, 0.00059138634242117405, 0.00048961391439661384, 0.00054321764037013054, 0.0003656702465377748, 0.00045625370694324374, 0.00056991557357832789, 0.00057108822511509061, 0.0028057063464075327, 0.000651000184006989, 0.00055985536891967058, 0.0021400684490799904, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -33939, 22338, -8623, -11217, 29812, 3322, 29839, 44029, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00046146131353452802, 0.000676007941365242, 0.0014968049945309758, 0.001679304288700223, 0.00079249677946791053, 0.00036861648550257087, 0.00065326661569997668, 0.00088608678197488189, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -56,-23,-31,1,-3,-45,-13,11,-95,127,-29,92,90,-5,77,-29,-19,-33,12,-25,-23,-1,-37,-33,19,-66,8,48,-6,28,21,-65,-2,-94,111,18,-3,11,-20,-9,97,21,36,-28,-61,-1,-11,-46, 
  /* [1][0][][] */ -2,33,127,-13,7,-26,13,-60,51,-4,21,3,-25,-1,-1,-113,27,-71,-7,-5,-32,39,27,-23,1,-18,-6,3,20,12,6,-6,-2,19,19,30,-18,-25,77,-59,2,46,-2,27,-22,6,24,-6, 
  /* [2][0][][] */ 8,-42,10,-40,36,27,-10,-31,10,1,4,9,-2,51,9,-5,-27,127,-31,-31,-15,14,-26,-10,123,2,2,-4,-32,-22,2,-45,-18,-10,-3,1,6,-16,-9,7,13,-18,-16,13,2,27,-25,-29, 
  /* [3][0][][] */ -7,-90,8,4,12,2,-3,5,1,-10,10,13,16,2,49,5,-18,-22,-8,15,-16,28,-30,11,18,48,-15,3,-14,10,127,6,-1,-5,-17,-4,-30,0,2,17,-7,1,-2,19,-20,1,3,17, 
  /* [4][0][][] */ -96,19,8,10,-15,-48,13,-7,51,-43,25,-38,-51,4,-25,3,-2,-2,16,12,6,-44,10,4,-26,47,5,101,-4,-8,-5,-29,6,-127,-49,3,-10,12,3,-7,-63,-8,-30,21,-55,4,10,18, 
  /* [5][0][][] */ -11,24,18,-20,-69,8,6,58,16,6,7,10,-11,-80,16,34,14,-120,39,-20,59,-71,13,46,-8,21,-112,-50,-24,-30,33,-7,19,-89,22,-83,86,-5,-32,29,5,-56,6,21,127,-42,-57,4, 
  /* [6][0][][] */ -49,-20,-14,22,19,-46,-12,-18,-29,18,43,-19,-29,35,27,-52,-3,11,19,-45,-46,69,6,-94,-24,-32,-72,-78,34,17,-31,-19,12,-66,-41,38,-63,-39,25,-68,1,30,42,52,127,-49,27,21, 
  /* [7][0][][] */ 32,34,-89,24,-20,11,3,65,-14,18,64,-29,3,-34,-18,-8,-23,-127,35,-22,69,56,0,-56,26,-26,50,11,-26,35,-19,6,-10,27,22,-32,-10,-65,-38,-74,-13,-30,48,60,-31,-41,-4,-3, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.019612105563282967, 0.028730336576700211, 0.063614211976528168, 0.071370430290699005, 0.03368111327290535, 0.01566619984805584, 0.027763830497860909, 0.037658687680959702, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -51399, -483, 8300, 15, 6747, 404, 1454, 36893, 1471, 33499, -3060, 30215, -7332, -1023, 27770, 12179, 383, 18081, 43839, 9366, 312, -191, -390, 18799, -8463, 28097, 47269, 35421, 3490, 1566, -2033, 1028, 1218, 13166, -7540, 19604, -11272, 14265, -22783, 137666, 29671, 22423, 13243, -1656, 16042, 3559, 2171, 1270, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00031856473651714623, 0.00023599567066412419, 0.00019462214550003409, 0.00019669554603751749, 0.00012800299737136811, 9.9291391961742193e-05, 0.00072742259362712502, 9.4365088443737477e-05, 0.00012828847684431821, 0.00014713672862853855, 8.1471494922880083e-05, 0.0001388999808114022, 0.00024299617507494986, 0.00024279687204398215, 9.0610919869504869e-05, 0.00013072026195004582, 0.00017801576177589595, 0.00021931662922725081, 5.9618505474645644e-05, 0.00014169991482049227, 0.0002378473145654425, 0.00022407871438190341, 0.00014519653632305562, 0.00011077509407186881, 0.00014196315896697342, 0.00012740558304358274, 0.00049136520829051733, 8.76404665177688e-05, 0.00021573981211986393, 0.00054712197743356228, 0.00011182003800058737, 0.0002173048269469291, 0.00066601741127669811, 0.00021714634203817695, 0.00017688538355287164, 0.00012341192632447928, 0.00031041217152960598, 0.00017666140047367662, 0.00026217370759695768, 1.8266993720317259e-05, 0.00010997855133609846, 5.1354600145714357e-05, 0.0001310259394813329, 0.00015349382010754198, 0.00014622823800891638, 0.00011904071288881823, 0.00015822716522961855, 7.8067307185847312e-05, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 4,-4,20,110,3,76,0,28,14,8,11,9,-8,-8,-45,8,-1,8,-25,-110,-8,-23,127,-9,-1,8,-8,12,-7,3,18,99,19,28,40,-26,1,35,-1,5,17,-68,-10,-9,20,1,-6,-9, 127,9,15,-127,27,83,12,10,125,127,8,45,-49,-24,3,8,127,-56,-62,-55,-104,26,-109,16,19,73,-33,-82,23,20,13,-122,6,-61,127,11,-40,-46,-6,121,-78,-97,-34,3,-33,-11,-127,21, -33,-4,8,16,-1,59,5,17,29,9,-13,33,-14,-2,16,3,-102,28,-4,77,-33,-12,-19,-6,-2,-55,-4,32,-18,4,3,-20,9,-23,20,-17,0,48,39,-9,50,33,-17,11,-41,0,-1,-5, 
  /* [0][1][][] */ 125,6,-1,-99,13,-30,35,-17,8,9,-13,55,-5,0,17,-34,-1,-49,-62,-82,9,-76,-123,-18,7,100,-18,-127,-9,31,13,-106,16,-51,2,127,-3,56,-40,43,-62,-127,38,-87,-43,-15,-15,-6, 25,-126,-127,114,-127,-127,-127,-127,-127,-94,127,-127,127,127,32,-127,-83,127,127,-106,127,127,112,127,127,-127,-127,29,-127,-127,95,127,-127,127,-23,-41,127,-127,127,127,127,-80,127,127,127,-120,97,105, 52,6,48,-13,5,-64,44,18,-23,14,-105,-7,2,-39,127,3,63,-65,-72,82,13,-48,12,-33,3,7,-38,71,19,38,1,4,32,-43,14,65,-5,63,68,-9,-81,3,-87,-31,28,-17,-13,5, 
  /* [0][2][][] */ -53,-4,25,-16,6,28,-35,21,6,-24,11,34,9,-4,-41,17,3,22,-16,110,4,-33,-16,-11,-1,23,-1,54,-11,1,49,-30,-17,-42,-28,-34,-2,29,9,-18,9,-11,42,-38,-35,19,-13,17, 68,127,74,20,14,-23,126,35,16,-3,43,28,-4,1,-94,25,-58,-56,-40,125,-39,49,11,21,35,-65,-40,31,76,-1,127,22,86,-24,10,-32,-26,-18,-12,126,-27,-16,-43,44,20,-30,5,-127, -42,0,6,-2,4,-9,-62,7,-20,-11,-42,-39,23,-7,-11,11,34,24,-11,-127,22,-12,7,-7,-4,7,-10,-52,-17,6,8,9,-21,87,-32,-20,-6,35,24,-58,5,3,-41,5,-42,127,-8,-4, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.01353900134563446, 0.010029816068708897, 0.008271440863609314, 0.0083595607429742813, 0.005440127570182085, 0.0042198840528726578, 0.030915459617972374, 0.0040105162188410759, 0.0054522603750228882, 0.0062533109448850155, 0.0034625385887920856, 0.0059032491408288479, 0.010327337309718132, 0.010318866930902004, 0.0038509638980031013, 0.0055556111037731171, 0.0075656697154045105, 0.0093209566548466682, 0.0025337864644825459, 0.0060222465544939041, 0.010108510963618755, 0.0095233451575040817, 0.0061708525754511356, 0.0047079413197934628, 0.0060334340669214725, 0.0054147373884916306, 0.020883021876215935, 0.0037247198633849621, 0.0091689415276050568, 0.023252684623003006, 0.0047523514367640018, 0.009235454723238945, 0.028305739164352417, 0.0092287193983793259, 0.0075176283717155457, 0.0052450066432356834, 0.013192516751587391, 0.0075081093236804008, 0.011142382398247719, 0.00077634723857045174, 0.0046740882098674774, 0.002182570518925786, 0.0055686021223664284, 0.0065234871581196785, 0.006214700173586607, 0.0050592301413416862, 0.0067246542312204838, 0.0033178604207932949, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 57777, 7597, 7018, 6974, 1530, 13330, -2319, -190, 795, 2172, 3622, 268, 1662, -1256, 556, -1924, 4958, 10887, -235, 18730, 5578, 2557, 8074, -475, 2566, 6246, 21276, 9571, -141, -2575, 300, 2116, -2145, 15544, 1759, 6304, 9079, 4859, 18679, 2165, -750, 2315, 1145, 4387, 4757, 2293, -1632, 2980, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 7.4905168730765581e-05, 0.00030107289785519242, 0.00022992593585513532, 0.00047486036783084273, 0.0014598962152376771, 0.00038051055162213743, 0.00082305580144748092, 0.0011935074580833316, 0.00071031937841325998, 0.00068111903965473175, 0.00063081603730097413, 0.00045307967229746282, 0.00056094414321705699, 0.0004276919353287667, 0.00061284872936084867, 0.0018618693575263023, 0.00032799941254779696, 0.00039230877882800996, 0.002099502133205533, 0.00013807242794428021, 0.00022836768766865134, 0.00034368602791801095, 0.00048504784354008734, 0.00090333394473418593, 0.00043719858513213694, 0.00020807460532523692, 0.00019010819960385561, 0.00038374829455278814, 0.00067943386966362596, 0.0010407251538708806, 0.00051574554527178407, 0.00040213414467871189, 0.0009101813193410635, 0.00015286152483895421, 0.00047805634676478803, 0.00028970948187634349, 0.00041367657831870019, 0.00029769839602522552, 0.00012531086395028979, 0.0020779247861355543, 0.00077309884363785386, 0.0011634042020887136, 0.00046688495785929263, 0.00034802904701791704, 0.00026184605667367578, 0.00049915205454453826, 0.00070201978087425232, 0.00089877634309232235, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 32,40,-3,-33,127,67,-36,-31, 
  /* [1][0][][] */ -11,-19,-8,127,16,8,-15,9, 
  /* [2][0][][] */ 30,-127,-3,50,-3,-58,102,-15, 
  /* [3][0][][] */ 127,-32,1,12,-22,-40,34,-20, 
  /* [4][0][][] */ 2,-32,127,-9,-17,-33,0,-72, 
  /* [5][0][][] */ 105,-58,19,-14,127,10,-29,82, 
  /* [6][0][][] */ -20,125,-7,127,44,57,-89,-84, 
  /* [7][0][][] */ -7,127,3,-4,11,-14,21,4, 
  /* [8][0][][] */ 127,42,-20,-6,-33,-16,0,-26, 
  /* [9][0][][] */ -127,16,7,22,21,4,-15,-5, 
  /* [10][0][][] */ -86,32,25,127,55,60,-3,-30, 
  /* [11][0][][] */ -127,16,28,-107,12,7,-73,-61, 
  /* [12][0][][] */ 127,42,18,10,-33,-28,6,-44, 
  /* [13][0][][] */ -26,116,-127,-9,1,119,-80,68, 
  /* [14][0][][] */ -20,-23,-23,127,11,-8,-20,-26, 
  /* [15][0][][] */ -5,127,9,-6,-8,-19,13,-57, 
  /* [16][0][][] */ 2,-127,-31,-1,-33,-106,94,-3, 
  /* [17][0][][] */ 5,127,-10,-10,5,66,-63,-17, 
  /* [18][0][][] */ 10,42,-127,1,10,68,-39,58, 
  /* [19][0][][] */ -62,-29,-15,36,-127,8,15,35, 
  /* [20][0][][] */ -98,13,7,-26,127,-48,70,8, 
  /* [21][0][][] */ -84,-23,9,2,-127,23,-23,-13, 
  /* [22][0][][] */ -127,-30,-3,7,93,0,13,47, 
  /* [23][0][][] */ -22,-20,-11,-4,-7,99,-127,-109, 
  /* [24][0][][] */ -11,31,-127,3,12,42,-13,67, 
  /* [25][0][][] */ 98,-26,10,127,-51,-14,-24,-28, 
  /* [26][0][][] */ -8,-17,-10,-2,-10,127,125,-34, 
  /* [27][0][][] */ 60,-4,1,7,127,27,42,-18, 
  /* [28][0][][] */ -1,121,-25,-16,8,61,-61,127, 
  /* [29][0][][] */ 2,-6,-8,-14,18,87,-127,-76, 
  /* [30][0][][] */ 4,-4,-8,-127,-4,7,-8,-9, 
  /* [31][0][][] */ -24,-3,0,10,-127,4,9,-1, 
  /* [32][0][][] */ -30,58,-6,-124,21,28,-127,-116, 
  /* [33][0][][] */ -39,-10,-17,11,-127,29,44,-1, 
  /* [34][0][][] */ -127,83,-19,12,38,-24,-29,2, 
  /* [35][0][][] */ -28,81,-16,-41,16,-127,59,-29, 
  /* [36][0][][] */ -16,62,32,5,-33,112,-127,-49, 
  /* [37][0][][] */ 48,-83,9,18,44,-127,68,-42, 
  /* [38][0][][] */ -9,-127,-33,11,8,41,-47,33, 
  /* [39][0][][] */ 7,-127,-8,-5,-6,4,-58,-104, 
  /* [40][0][][] */ 100,-22,-16,12,-24,94,-127,-27, 
  /* [41][0][][] */ 12,-127,2,-3,4,63,-49,116, 
  /* [42][0][][] */ 21,-38,8,-127,-21,-16,-18,-12, 
  /* [43][0][][] */ -106,-47,-1,-127,70,81,-47,-10, 
  /* [44][0][][] */ -15,-27,-9,16,5,117,127,6, 
  /* [45][0][][] */ -127,-19,0,7,-7,-7,11,-21, 
  /* [46][0][][] */ 22,94,127,-1,4,11,-3,44, 
  /* [47][0][][] */ -18,30,12,127,55,37,39,-27, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00017914365162141621, 0.00072004779940471053, 0.00054989225463941693, 0.0011356789618730545, 0.003491496667265892, 0.00091003137640655041, 0.0019684252329170704, 0.0028543996158987284, 0.0016988042043522, 0.0016289683990180492, 0.0015086635248735547, 0.0010835881112143397, 0.0013415573630481958, 0.0010228706523776054, 0.0014656927669420838, 0.0044528581202030182, 0.00078444537939503789, 0.00093824806390330195, 0.0050211823545396328, 0.00033021485432982445, 0.0005461655673570931, 0.00082196161383762956, 0.0011600434081628919, 0.0021604190114885569, 0.0010456067975610495, 0.00049763248534873128, 0.00045466393930837512, 0.00091777474153786898, 0.0016249382169917226, 0.0024890045169740915, 0.0012334601487964392, 0.00096174649661406875, 0.0021767951548099518, 0.00036558456486091018, 0.0011433224426582456, 0.00069287093356251717, 0.00098935142159461975, 0.00071197730721905828, 0.00029969422030262649, 0.0049695773050189018, 0.0018489478388801217, 0.0027824046555906534, 0.0011166048934683204, 0.00083234842168167233, 0.00062623259145766497, 0.0011937750969082117, 0.0016789548099040985, 0.002149519044905901, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -4137, -21818, 20212, 24784, 5754, -352, 35564, 14085, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.001233966089785099, 0.00064585456857457757, 0.0012787544401362538, 0.001104454044252634, 0.0011880794772878289, 0.0011631817324087024, 0.00085420213872566819, 0.00063203158788383007, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -8,-1,8,-89,12,18,6,8,4,10,4,-17,92,0,3,8,0,-5,-3,0,74,-2,-2,2,20,35,21,15,2,1,6,-127,10,7,2,1,-28,-7,-10,30,7,-30,-5,5,3,-9,1,3, 
  /* [1][0][][] */ -35,-3,-3,-6,38,28,-26,77,7,14,-31,-11,17,0,27,35,0,33,20,-53,-1,20,127,17,-23,-6,50,-1,29,-11,16,-5,15,-11,-19,-29,4,-53,2,8,-5,-5,-75,-6,-42,-1,-54,-80, 
  /* [2][0][][] */ -51,18,-4,20,38,-5,26,42,-19,59,-4,-4,9,0,-2,47,0,17,-127,26,0,16,1,-10,-39,19,41,0,19,33,18,6,11,-3,-6,-8,-5,4,9,7,35,3,-34,9,27,-60,27,4, 
  /* [3][0][][] */ -6,2,-3,2,-9,22,0,-10,69,19,0,-14,24,0,-29,-8,0,2,-12,-4,8,-3,3,-26,-9,-12,-15,9,-4,-10,-12,-11,-47,45,-55,-12,14,1,-5,-127,-4,3,0,-49,-1,5,-2,2, 
  /* [4][0][][] */ 1,-10,79,31,6,-17,-5,-7,5,-8,-2,-5,-78,0,-6,3,0,17,4,1,62,3,0,-2,-10,22,-7,48,-13,-3,5,92,-1,5,6,-7,24,-24,-25,-17,-2,-127,5,4,-4,1,-7,-7, 
  /* [5][0][][] */ -6,58,6,-5,0,43,29,21,-29,33,9,62,24,0,-127,-3,0,6,-42,20,-16,0,-13,37,-23,1,35,-8,-16,24,25,-17,59,34,-44,7,2,23,-51,16,26,-7,-16,32,20,58,22,17, 
  /* [6][0][][] */ -20,-55,6,6,44,-50,-20,12,31,-24,-15,86,-13,0,-127,47,0,-10,40,-22,-13,5,20,-43,28,15,-5,-19,49,-14,-11,-8,94,-36,31,13,-16,-6,-66,-17,-19,-19,-12,-26,-19,-83,-21,-32, 
  /* [7][0][][] */ -119,-35,-12,3,127,28,56,4,20,6,24,-34,-16,0,91,110,0,15,8,53,3,8,-38,36,30,1,40,8,61,56,59,5,-13,-12,-23,-16,27,27,18,38,60,4,-29,-11,60,3,65,87, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.052443556487560272, 0.02744881808757782, 0.054347064346075058, 0.046939294785261154, 0.050493374466896057, 0.049435220658779144, 0.03630359098315239, 0.026861341670155525, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 78672, 49442, 62565, 44010, 1648, 13106, 1745, 33529, 23360, 38788, 28933, 7860, -46229, -127, 38624, 1387, -204, 41828, 755, 3389, -15779, 9812, 46773, 40832, -18420, 40662, 43311, 26238, -2091, 16271, -9065, -50028, 10994, 105796, 27675, 725, 57146, -748, 172463, -26264, 14427, -27157, 1325, 108564, 1009, 81010, 2434, -23897, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 7.5793788710143417e-05, 8.1965583376586437e-05, 0.00015900690050330013, 0.00013905014202464372, 0.00012562591291498393, 0.00020653367391787469, 0.00013060336641501635, 5.7677509175846353e-05, 9.4780094514135271e-05, 2.7422191124060191e-05, 8.2563405157998204e-05, 2.029662391578313e-05, 0.00016636998043395579, 0.005541567225009203, 6.6189524659421295e-05, 0.00026309091481380165, 0.0027484172023832798, 1.7896869394462556e-05, 9.0943678515031934e-05, 0.00018560599710326642, 0.00010693260992411524, 0.00013990896695759147, 0.00012656772742047906, 2.9179305784055032e-05, 7.2978975367732346e-05, 6.6471278842072934e-05, 3.5866149119101465e-05, 3.4389358916087076e-05, 0.00031056776060722768, 4.9984675570158288e-05, 4.5524975575972348e-05, 0.00018201903731096536, 0.00021885607566218823, 9.7318770713172853e-06, 8.4877719928044826e-05, 0.00024482773733325303, 1.9265824448666535e-05, 0.00051102979341521859, 2.7034358936361969e-05, 8.8109787611756474e-05, 5.3905045206192881e-05, 0.00021123499027453363, 0.00013131333980709314, 9.3128201115177944e-06, 0.00014582752191927284, 7.3610623076092452e-05, 0.00024998106528073549, 0.00014268772793002427, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -43,-21,-5,-18,4,-38,-79,-69,-25,-52,9,66,35,-71,113,-43,-113,-84,40,-8,1,-68,-113,-82,-34,-125,-61,-25,71,14,93,26,-127,-91,-7,54,15,49,-127,78,-75,-16,100,-109,-3,-36,-86,108, 77,11,-25,-32,55,-127,-127,-82,59,-76,-115,110,38,-82,-2,62,-52,-114,62,4,14,-113,-127,-72,-4,-127,-114,-50,-55,20,-55,55,28,-127,65,81,9,75,-93,127,-127,5,120,-127,1,-24,-127,97, -30,42,7,-7,-66,-109,-60,-20,87,-10,-127,36,9,-71,-103,-13,-127,-25,30,9,-12,-75,-35,-30,-11,-26,-55,-21,-13,17,-26,9,106,-86,69,35,10,37,-8,16,-80,3,6,-83,-19,4,-56,15, 
  /* [0][1][][] */ -86,-127,-44,-42,-14,56,101,-104,-25,-113,-19,109,89,-64,26,-96,-121,-97,92,-76,41,-86,-105,-127,41,-126,-75,-31,127,-60,127,82,-44,-85,-13,86,-36,-78,-111,89,40,58,105,-109,-93,-117,80,122, 127,-83,-127,-127,127,42,97,-127,97,-127,-108,127,127,-14,-7,127,-60,-127,127,-127,127,-127,-123,-123,127,-106,-127,-127,-120,-127,-72,127,28,-107,127,127,-70,-127,-100,90,59,127,127,-116,-115,-127,123,127, -53,28,-63,-84,-122,-22,32,-38,127,-22,-72,36,56,-70,-27,-46,-37,-31,56,-73,59,-84,-39,-30,48,-5,-41,-65,13,-93,-35,19,29,-93,118,22,-37,-62,-3,-14,35,54,9,-75,-60,-37,63,37, 
  /* [0][2][][] */ -58,-109,-35,-36,-4,34,-6,-36,-35,-63,-15,53,78,-127,-127,-64,-43,-20,65,75,51,-31,-18,-63,36,-59,-16,-63,76,27,77,62,106,-29,-36,1,-96,35,-20,33,9,37,22,-58,97,-79,2,31, 88,-73,-89,-88,81,18,4,-49,49,-74,-31,54,82,-26,17,93,-24,-33,79,116,79,-51,-20,-60,99,-69,-20,-101,-50,36,-49,111,-18,-47,70,13,-127,53,-17,2,10,32,19,-69,127,-100,-14,43, -27,28,-43,-39,-82,-20,19,-13,60,-7,-15,31,31,-43,112,-31,-93,-3,32,57,74,-28,-3,-7,47,3,-7,-66,-17,26,-21,39,-90,-39,69,6,-26,21,24,-36,5,35,-1,-19,62,-37,-6,23, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0032212359365075827, 0.0034835371188819408, 0.006757793016731739, 0.0059096310287714005, 0.0053391009569168091, 0.0087776808068156242, 0.0055506429634988308, 0.0024512941017746925, 0.0040281540714204311, 0.0011654431000351906, 0.0035089447628706694, 0.0008626065100543201, 0.0070707239210605621, 0.23551659286022186, 0.0028130547143518925, 0.011181363835930824, 0.1168077290058136, 0.00076061696745455265, 0.003865106264129281, 0.0078882547095417976, 0.0045446357689797878, 0.005946130957454443, 0.0053791282698512077, 0.0012401205021888018, 0.0031016063876450062, 0.0028250294271856546, 0.0015243112575262785, 0.001461547682993114, 0.013199129141867161, 0.0021243486553430557, 0.0019348114728927612, 0.0077358088456094265, 0.0093013830482959747, 0.00041360477916896343, 0.0036073029041290283, 0.010405179113149643, 0.00081879750359803438, 0.021718764677643776, 0.0011489602038636804, 0.0037446659989655018, 0.0022909643594175577, 0.008977486751973629, 0.0055808168835937977, 0.00039579483564011753, 0.006197669543325901, 0.0031284515280276537, 0.010624194517731667, 0.0060642282478511333, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 3591, 171, 8924, 6506, 6813, 5688, 8915, 33, -114, -212, 1922, 396, 10277, -72783384, 3103, 20476, -58754524, -118, -346, 12831, 3792, -11, -73, 409, 3570, -830, 83, 440, 4300, 1585, 2084, 14225, 2963, 309, 210, -2411, 349, 2530, -152, 11608, 1983, 9759, -452, -89, 11127, 140, 15424, 4359, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00058559619355946779, 0.00048042702837847173, 0.00035828258842229843, 0.00029730665846727788, 0.00030433727079071105, 0.00036648995592258871, 0.00041877487092278898, 0.0016452402342110872, 0.000500363705214113, 0.0031586659606546164, 0.00077286665327847004, 0.0024192808195948601, 0.00021501054288819432, 2.2283059841754493e-09, 0.00086004886543378234, 0.00016302490257658064, 2.2283059841754493e-09, 0.0066878846846520901, 0.00054804602405056357, 0.00029812502907589078, 0.00029478888609446585, 0.0056776306591928005, 0.0004285539616830647, 0.0016293068183586001, 0.0010781462769955397, 0.00070012861397117376, 0.0027523292228579521, 0.0029013440944254398, 0.00028164862305857241, 0.001882012584246695, 0.0014128881739452481, 0.00016456373850814998, 0.00025458497111685574, 0.010193983092904091, 0.0005347487167455256, 0.00053652515634894371, 0.0044857091270387173, 0.00052229699213057756, 0.0027928920462727547, 0.00029708191868849099, 0.0014701412292197347, 0.00022657580848317593, 0.00044033923768438399, 0.010525139980018139, 0.00044573686318472028, 0.00071749178459867835, 0.00018596464360598475, 0.00021155335707589984, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 14,-127,38,-34,6,-33,-34,31, 
  /* [1][0][][] */ 87,82,-40,-127,7,-1,-67,127, 
  /* [2][0][][] */ 40,3,-38,127,71,114,36,91, 
  /* [3][0][][] */ 73,63,-77,127,-85,-16,-10,16, 
  /* [4][0][][] */ -39,-121,69,14,-22,29,-18,-127, 
  /* [5][0][][] */ 2,-2,-37,34,-11,-27,45,127, 
  /* [6][0][][] */ 79,5,-127,-55,69,42,51,-7, 
  /* [7][0][][] */ 127,26,9,-28,27,2,81,-72, 
  /* [8][0][][] */ 9,-61,5,97,11,13,-2,-127, 
  /* [9][0][][] */ 93,-97,15,-32,-10,36,-127,72, 
  /* [10][0][][] */ -127,-54,-119,5,-17,11,-79,51, 
  /* [11][0][][] */ -20,-27,-6,-91,-127,-20,28,-16, 
  /* [12][0][][] */ 11,8,-35,62,-68,-19,52,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ 2,-39,-8,26,61,127,37,54, 
  /* [15][0][][] */ 40,8,9,-127,78,59,-64,75, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 22,28,127,22,-33,-15,30,39, 
  /* [18][0][][] */ 71,-127,19,27,-6,8,-103,0, 
  /* [19][0][][] */ -127,8,49,87,-71,-71,-87,92, 
  /* [20][0][][] */ 32,41,-32,127,-46,-115,-13,62, 
  /* [21][0][][] */ 43,18,127,4,-14,-10,69,3, 
  /* [22][0][][] */ -66,-16,-127,3,9,10,-82,-5, 
  /* [23][0][][] */ -115,127,-20,-17,3,-15,108,-99, 
  /* [24][0][][] */ 17,-57,-61,95,-14,-77,103,127, 
  /* [25][0][][] */ 23,57,38,31,119,127,-58,-54, 
  /* [26][0][][] */ -61,-29,-127,-3,9,14,-110,-15, 
  /* [27][0][][] */ 2,-23,4,-14,-48,127,53,32, 
  /* [28][0][][] */ -9,-35,-33,29,12,127,62,61, 
  /* [29][0][][] */ 84,26,127,-28,-35,-15,100,-34, 
  /* [30][0][][] */ -72,127,-22,-58,25,-2,96,-26, 
  /* [31][0][][] */ -35,-94,-14,12,38,-101,124,127, 
  /* [32][0][][] */ -1,8,-39,113,-25,71,83,127, 
  /* [33][0][][] */ -9,63,7,-113,4,-22,0,127, 
  /* [34][0][][] */ -17,76,15,-104,30,-17,7,127, 
  /* [35][0][][] */ 127,-9,-53,-34,49,55,105,-57, 
  /* [36][0][][] */ -127,14,47,64,-62,30,-100,76, 
  /* [37][0][][] */ -8,-23,-13,-1,8,127,44,35, 
  /* [38][0][][] */ 13,15,9,82,127,0,-26,34, 
  /* [39][0][][] */ -9,30,52,-127,23,-10,-24,107, 
  /* [40][0][][] */ 97,30,127,14,-7,7,63,-6, 
  /* [41][0][][] */ -5,-30,-23,86,51,127,72,103, 
  /* [42][0][][] */ -63,-4,127,17,-36,4,-40,49, 
  /* [43][0][][] */ -6,-47,11,93,-22,-2,21,-127, 
  /* [44][0][][] */ 47,12,-51,-127,29,-37,4,-85, 
  /* [45][0][][] */ -66,127,-4,-40,23,-10,51,-46, 
  /* [46][0][][] */ -127,-13,73,59,-21,65,-116,74, 
  /* [47][0][][] */ 116,34,127,-7,35,-22,127,-29, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0010346411727368832, 0.00084882648661732674, 0.00063301966292783618, 0.00052528636297211051, 0.00053770816884934902, 0.00064752058824524283, 0.00073989841621369123, 0.0029068379662930965, 0.00088405096903443336, 0.0055807838216423988, 0.001365513657219708, 0.0042744255624711514, 0.00037988420808687806, 3.937008052901092e-09, 0.0015195487067103386, 0.00028803510940633714, 3.937008052901092e-09, 0.011816265992820263, 0.0009682968957349658, 0.00052673229947686195, 0.00052083790069445968, 0.010031332261860371, 0.00075717631261795759, 0.0028786864131689072, 0.0019048869144171476, 0.0012369989417493343, 0.0048628612421452999, 0.0051261433400213718, 0.00049762148410081863, 0.0033251713030040264, 0.0024963144678622484, 0.00029075396014377475, 0.00044980499660596251, 0.018010899424552917, 0.00094480294501408935, 0.00094794161850586534, 0.0079254256561398506, 0.00092280301032587886, 0.0049345283769071102, 0.00052488927030935884, 0.0025974700693041086, 0.00040031792013905942, 0.00077799870632588863, 0.018595993518829346, 0.00078753533307462931, 0.0012676764745265245, 0.00032856542384251952, 0.00037377601256594062, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -3326, -43260, -7788, -12699, -29387, -3577, -26679, -26242, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.002000854117795825, 0.0022992815356701612, 0.0026207878254354, 0.0011741871712729335, 0.0010178949451074004, 0.0022953513544052839, 0.0013601412065327168, 0.00099133129697293043, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-20,19,-1,125,1,-3,-4,2,-127,-97,-7,0,115,5,0, 
  /* [1][0][][] */ 0,-23,-3,89,74,8,29,-1,0,-4,127,-48,0,31,-10,0, 
  /* [2][0][][] */ 0,3,-3,-9,-59,2,9,-1,3,6,-17,4,0,127,-7,0, 
  /* [3][0][][] */ 0,-11,-12,-127,81,21,71,15,0,62,-3,42,0,0,15,0, 
  /* [4][0][][] */ 0,61,-16,34,-61,35,127,-24,5,-70,23,-5,0,-8,19,0, 
  /* [5][0][][] */ 0,-11,-7,0,-25,-21,-10,15,-1,6,-5,-41,0,-6,127,0, 
  /* [6][0][][] */ 0,5,4,5,51,-19,-26,-2,4,-107,125,71,0,127,50,0, 
  /* [7][0][][] */ 0,18,-12,127,-1,-5,14,-3,-4,75,-54,76,0,2,44,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.085036300122737885, 0.097719468176364899, 0.11138348281383514, 0.049902953207492828, 0.043260533362627029, 0.097552433609962463, 0.057806000113487244, 0.042131580412387848, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { -161, 32085, 5480, 13002, 12646, 23644, 10847, 66811, -15866, 6507, 29733, 14516, -445, 27471, 11006, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 8.140264981193468e-05, 0.00073080154834315181, 0.00027428907924331725, 0.00014830817235633731, 0.00013963009405415505, 0.00039401082904078066, 5.8122754126088694e-05, 1.6383770343963988e-05, 0.0002802948874887079, 0.00019138137577101588, 0.0007276692776940763, 0.00072724185883998871, 0.00022467576491180807, 0.00018103115144185722, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,18,-81,-127,39,-67,80,-76,-90,-3,-8,29,-127,5,54,-73, 51,24,-127,127,127,-127,127,-127,-84,127,-127,52,-105,6,127,-25, 24,-25,91,-2,-72,68,-92,75,-95,-27,4,-17,61,1,-100,-29, 
  /* [0][1][][] */ -127,127,-22,13,-44,16,-26,12,-28,0,3,-111,-49,9,-29,-14, -78,-42,-57,-15,-7,-25,10,-29,-107,-89,21,-13,-104,-127,1,23, 14,0,65,2,3,34,-23,31,-127,6,-2,0,-21,12,-3,43, 
  /* [0][2][][] */ -115,-74,70,2,-6,39,-37,50,-76,0,-1,5,40,2,-26,23, 23,-5,32,-2,-27,40,-32,19,-124,-13,0,85,-58,0,-28,-111, 21,-8,20,0,4,15,11,20,-115,4,-1,-127,107,3,18,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0034596126060932875, 0.031059065833687782, 0.011657285504043102, 0.0063030971214175224, 0.0059342789463698864, 0.016745459288358688, 0.0024702169466763735, 0.0006963101914152503, 0.011912533082067966, 0.0081337084993720055, 0.030925944447517395, 0.030907778069376945, 0.0095487199723720551, 0.0076938238926231861, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 16284, -114096, 22149, 342343, -9472, 105341, 11136, -251550, 40892, 34845, 903870, -1073741824, 52308, 100935, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00018866614846047014, 0.00015935204282868654, 3.602869765018113e-05, 9.0739758888958022e-06, 0.00018750534218270332, 3.2377825846197084e-05, 0.00028206096612848341, 4.6812765504000708e-06, 4.2741798097267747e-05, 8.6883155745454133e-05, 6.4457958615093958e-06, 1.1533876076441629e-09, 7.2374568844679743e-05, 2.2998823624220677e-05, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 55,2,46, 1,-22,25, -127,-116,-51, 
  /* [1][1][][] */ 4,-8,7, -25,-5,-1, -4,-31,20, 
  /* [1][2][][] */ -12,6,3, -14,-1,7, 32,-16,33, 
  /* [2][0][][] */ 32,-14,-8, 76,112,2, 41,-41,9, 
  /* [2][1][][] */ 14,11,-4, 69,127,-28, 14,-9,-6, 
  /* [2][2][][] */ 47,-66,19, 76,-42,-21, 37,-53,17, 
  /* [3][0][][] */ 10,9,4, 36,88,32, -12,4,-6, 
  /* [3][1][][] */ 37,22,14, 89,127,44, -27,-27,2, 
  /* [3][2][][] */ 15,-10,15, 27,6,17, -12,-14,-1, 
  /* [4][0][][] */ 38,63,5, 7,67,-1, -22,-2,-1, 
  /* [4][1][][] */ 45,87,54, 35,118,40, 35,50,-6, 
  /* [4][2][][] */ 60,71,38, 69,127,37, 6,38,50, 
  /* [5][0][][] */ 12,8,-120, 0,6,-105, -1,34,-24, 
  /* [5][1][][] */ 8,-33,-127, 3,-35,-105, 5,22,-6, 
  /* [5][2][][] */ 1,17,-7, 7,8,5, 7,21,3, 
  /* [6][0][][] */ 19,-62,37, 40,-88,40, 7,-19,12, 
  /* [6][1][][] */ 34,-94,63, 59,-127,72, 9,-26,22, 
  /* [6][2][][] */ 21,-34,15, 13,-46,28, -9,8,4, 
  /* [7][0][][] */ -29,10,29, -92,-44,31, -18,26,36, 
  /* [7][1][][] */ -20,-19,18, -127,-106,17, -11,-15,28, 
  /* [7][2][][] */ -24,27,12, -11,2,21, -25,15,12, 
  /* [8][0][][] */ 126,115,73, 127,115,70, 126,111,69, 
  /* [8][1][][] */ 127,116,72, 127,115,69, 127,111,68, 
  /* [8][2][][] */ 123,111,74, 124,111,71, 123,106,69, 
  /* [9][0][][] */ -19,-8,20, -10,-13,8, 5,5,-2, 
  /* [9][1][][] */ 102,110,3, 78,127,30, -8,27,41, 
  /* [9][2][][] */ -43,-37,4, -16,-43,-11, 2,4,-18, 
  /* [10][0][][] */ -24,-89,-16, 37,93,23, -7,-17,0, 
  /* [10][1][][] */ -59,-110,-12, 83,127,17, -15,-31,2, 
  /* [10][2][][] */ -31,-24,5, 39,19,-9, -7,-5,10, 
  /* [11][0][][] */ -51,8,-2, -31,-12,-4, -19,-92,-71, 
  /* [11][1][][] */ -94,-19,-25, -86,-40,-57, -46,-54,-78, 
  /* [11][2][][] */ -8,-39,-73, 117,127,70, -40,12,-43, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -50,-95,-19, -60,-109,-26, -8,-16,-7, 
  /* [13][1][][] */ 62,114,14, 58,127,23, 8,16,9, 
  /* [13][2][][] */ -8,-18,2, 2,-18,-3, 1,4,-6, 
  /* [14][0][][] */ 45,-8,-37, 78,-29,-55, 35,-9,-26, 
  /* [14][1][][] */ 89,-22,-70, 127,-46,-85, 61,-21,-34, 
  /* [14][2][][] */ 52,-19,-41, 70,-31,-47, 24,-14,-14, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.048109866678714752, 0.040634769946336746, 0.0091873174533247948, 0.0023138637188822031, 0.047813858836889267, 0.0082563450559973717, 0.071925543248653412, 0.0011937255039811134, 0.01089915819466114, 0.022155202925205231, 0.0016436778241768479, 2.9411381774480105e-07, 0.018455514684319496, 0.005864699836820364, 3.1706054670621597e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.56598967313766479, } };
const TfArray<1, int> quant46_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.41812905669212341, } };
const TfArray<1, int> quant50_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.44941046833992004, } };
const TfArray<1, int> quant53_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.53007763624191284, } };
const TfArray<1, int> quant54_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.2640228271484375, } };
const TfArray<1, int> quant58_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.24039022624492645, } };
const TfArray<1, int> quant61_zero = { 1, { 14 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.27629992365837097, } };
const TfArray<1, int> quant62_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.24106110632419586, } };
const TfArray<1, int> quant65_zero = { 1, { 13 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.32983747124671936, } };
const TfArray<1, int> quant66_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.050094418227672577, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,7 } };
const TfArray<1, float> quant69_scale = { 1, { 0.12960352003574371, } };
const TfArray<1, int> quant69_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,7 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 28, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 224, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1008), (TfLiteIntArray*)&g0::tensor_dimension69, 1008, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 1008, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_4_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
